openapi: 3.0.0
info:
  title: DNA Testing Lab API
  description: API for managing DNA testing lab operations including bookings, services, users, payments, and more
  version: 1.0.0
  contact:
    name: DNA Lab API Support
    email: support@dnalab.com
servers:
  - url: http://localhost:5001
    description: Local development server
  - url: https://app-bggwpxm32a-uc.a.run.app
    description: Production server

tags:
  - name: Services
    description: DNA testing services management
  - name: Methods
    description: Testing methods management
  - name: Method Service
    description: Service-method relationships
  - name: Users
    description: User management and authentication
  - name: Roles
    description: User roles management
  - name: Bookings
    description: Service booking management
  - name: Booking History
    description: Booking status tracking
  - name: Time Slots
    description: Available time slot management
  - name: Payments
    description: Payment processing and management

components:
  schemas:
    # Core Models
    User:
      type: object
      properties:
        id:
          type: string
          description: Firebase Auth UID
        fullname:
          type: string
        gender:
          type: string
        avatar:
          type: string
        email:
          type: string
          format: email
        accountStatus:
          type: string
          enum: [active, inactive]
          default: inactive
        authProvider:
          type: string
        phone:
          type: string
        address:
          type: string
        roleId:
          type: string
          default: "0"
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Staff:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        hireDate:
          type: string
          format: date
        slot:
          type: integer
          default: 0
        specification:
          type: array
          items:
            type: string
        certifications:
          type: array
          items:
            type: string
        positionId:
          type: string
        position:
          $ref: '#/components/schemas/Position'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Position:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        fullDescription:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        categoryId:
          type: string
        category:
          $ref: '#/components/schemas/ServiceCategory'
        icon:
          type: string
        featured:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ServiceCategory:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        hasLegalValue:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Method:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ServiceMethod:
      type: object
      properties:
        serviceId:
          type: string
        service:
          $ref: '#/components/schemas/Service'
        methodId:
          type: string
        method:
          $ref: '#/components/schemas/Method'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TimeSlot:
      type: object
      properties:
        id:
          type: string
        slotDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        currentBookings:
          type: integer
          default: 0
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Booking:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        user:
          $ref: '#/components/schemas/User'
        staffId:
          type: string
        staff:
          $ref: '#/components/schemas/Staff'
        timeSlotId:
          type: string
        timeSlot:
          $ref: '#/components/schemas/TimeSlot'
        serviceId:
          type: string
        service:
          $ref: '#/components/schemas/Service'
        methodId:
          type: string
        method:
          $ref: '#/components/schemas/Method'
        totalAmount:
          type: number
          format: float
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BookingHistory:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        booking:
          $ref: '#/components/schemas/Booking'
        description:
          type: string
        status:
          type: string
          default: pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Participant:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        booking:
          $ref: '#/components/schemas/Booking'
        name:
          type: string
        age:
          type: integer
        identification:
          type: string
        gender:
          type: string
        relationship:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Information:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        booking:
          $ref: '#/components/schemas/Booking'
        name:
          type: string
        identification:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        booking:
          $ref: '#/components/schemas/Booking'
        amount:
          type: number
          format: float
        paymentMethod:
          type: string
        status:
          type: string
          default: pending
        paymentDate:
          type: string
          format: date
        refundDetail:
          type: string
        otherDetails:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Request/Response Models
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        status:
          type: string
          enum: [success, error]
        message:
          type: string
        data:
          type: object
        error:
          type: string

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        status:
          type: string
          enum: [error]
        message:
          type: string
        error:
          type: string

    # Input Models
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
        - roleId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
        roleId:
          type: string

    UpdateUserRequest:
      type: object
      required:
        - userId
        - fullname
        - gender
        - avatar
        - phone
        - address
      properties:
        userId:
          type: string
        fullname:
          type: string
        gender:
          type: string
        avatar:
          type: string
        phone:
          type: string
        address:
          type: string

    CreateServiceRequest:
      type: object
      required:
        - title
        - description
        - fullDescription
        - price
        - duration
        - categoryId
        - icon
        - featured
        - methods
      properties:
        title:
          type: string
        description:
          type: string
        fullDescription:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        categoryId:
          type: string
        icon:
          type: string
        featured:
          type: boolean
        methods:
          type: array
          items:
            type: string

    UpdateServiceRequest:
      type: object
      required:
        - serviceId
      properties:
        serviceId:
          type: string
        title:
          type: string
        description:
          type: string
        fullDescription:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
        categoryId:
          type: string
        icon:
          type: string
        featured:
          type: boolean
        methods:
          type: array
          items:
            type: string

    CreateBookingRequest:
      type: object
      required:
        - userId
        - slotDate
        - startTime
        - endTime
        - methodId
        - serviceId
        - totalAmount
        - participants
        - information
      properties:
        userId:
          type: string
        slotDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        methodId:
          type: string
        serviceId:
          type: string
        totalAmount:
          type: number
          format: float
        participants:
          type: array
          items:
            type: object
            required:
              - name
              - age
              - gender
            properties:
              name:
                type: string
              age:
                type: integer
                minimum: 0
                maximum: 150
              identification:
                type: string
              gender:
                type: string
              relationship:
                type: string
        information:
          type: object
          required:
            - name
            - identification
            - address
            - phone
          properties:
            name:
              type: string
            identification:
              type: string
            address:
              type: string
            phone:
              type: string
            email:
              type: string
              format: email

    CreateRoleRequest:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    CreatePaymentRequest:
      type: object
      required:
        - bookingId
        - amount
        - paymentMethod
      properties:
        bookingId:
          type: string
        amount:
          type: number
          format: float
        paymentMethod:
          type: string
        paymentDate:
          type: string
          format: date
        otherDetails:
          type: array
          items:
            type: string

paths:
  /:
    get:
      summary: API Welcome Message
      description: Returns a welcome message and API documentation link
      responses:
        '200':
          description: Welcome message
          content:
            text/plain:
              schema:
                type: string

  # Services Endpoints
  /services/add:
    post:
      tags:
        - Services
      summary: Create a new service
      description: Add a new DNA testing service to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Service'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Service already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      description: Retrieve all available DNA testing services
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '404':
          description: No services found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Services
      summary: Get service by ID
      description: Retrieve a specific service by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
      responses:
        '200':
          description: Service retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/Service'
                          methods:
                            type: array
                            items:
                              $ref: '#/components/schemas/ServiceMethod'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Services
      summary: Update a service
      description: Update an existing DNA testing service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Service'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Services
      summary: Delete a service
      description: Delete a DNA testing service from the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
      responses:
        '200':
          description: Service deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services/category:
    post:
      tags:
        - Services
      summary: Get services by category
      description: Retrieve all services belonging to a specific category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
              properties:
                categoryId:
                  type: string
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '400':
          description: Category ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found or no services in category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Methods Endpoints
  /methods:
    get:
      tags:
        - Methods
      summary: Get all methods
      description: Retrieve all available testing methods
      responses:
        '200':
          description: Methods retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Method'
        '404':
          description: No methods found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Methods
      summary: Get method by ID
      description: Retrieve a specific testing method by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
      responses:
        '200':
          description: Method retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Method'
        '400':
          description: Method ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Method Service Relationships
  /method/services:
    post:
      tags:
        - Method Service
      summary: Get services by method
      description: Retrieve all services that use a specific testing method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceMethod'
        '400':
          description: Method ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Method not found or no services for this method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /service/methods:
    post:
      tags:
        - Method Service
      summary: Get methods by service
      description: Retrieve all testing methods available for a specific service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
      responses:
        '200':
          description: Methods retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceMethod'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found or no methods for this service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Users Endpoints
  /users/add:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Add a new user to the system with Firebase authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          responseAuthData:
                            type: object
                          responseStaffData:
                            type: object
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users in the system
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '404':
          description: No users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update user profile
      description: Update user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role:
    post:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No users found with this role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role/staff:
    put:
      tags:
        - Users
      summary: Update user role to staff
      description: Promote a user to staff role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - positionId
              properties:
                userId:
                  type: string
                positionId:
                  type: string
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role/admin:
    put:
      tags:
        - Users
      summary: Update user role to admin
      description: Promote a user to admin role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - positionId
              properties:
                userId:
                  type: string
                positionId:
                  type: string
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/status:
    put:
      tags:
        - Users
      summary: Update user account status
      description: Update user account status (active/inactive)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - accountStatus
              properties:
                userId:
                  type: string
                accountStatus:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Roles Endpoints
  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      description: Retrieve all system roles
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '404':
          description: No roles found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Roles
      summary: Get role by ID
      description: Retrieve a specific role by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Role'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Roles
      summary: Update a role
      description: Update an existing role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Delete a role from the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /roles/add:
    post:
      tags:
        - Roles
      summary: Create a new role
      description: Add a new role to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Role'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Bookings Endpoints
  /bookings/add:
    post:
      tags:
        - Bookings
      summary: Create a new booking
      description: Create a new service booking with participants and information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Booking'
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Booking conflict - time slot unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get all bookings
      description: Retrieve all bookings in the system
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '404':
          description: No bookings found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Bookings
      summary: Get booking by ID
      description: Retrieve a specific booking with its history, participants, and information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          booking:
                            $ref: '#/components/schemas/Booking'
                          history:
                            type: array
                            items:
                              $ref: '#/components/schemas/BookingHistory'
                          participants:
                            type: array
                            items:
                              $ref: '#/components/schemas/Participant'
                          information:
                            type: array
                            items:
                              $ref: '#/components/schemas/Information'
        '400':
          description: Booking ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Bookings
      summary: Delete a booking
      description: Delete a booking from the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Booking ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/timeslot:
    post:
      tags:
        - Bookings
      summary: Get bookings by time slot
      description: Retrieve all bookings for a specific time slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotId
              properties:
                timeSlotId:
                  type: string
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: Time slot ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No bookings found for this time slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/user:
    post:
      tags:
        - Bookings
      summary: Get bookings by user
      description: Retrieve all bookings for a specific user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found or no bookings found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/staff:
    post:
      tags:
        - Bookings
      summary: Get bookings by staff
      description: Retrieve all bookings assigned to a specific staff member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - staffId
              properties:
                staffId:
                  type: string
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: Staff ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No bookings found for this staff member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Booking History
  /booking/history:
    post:
      tags:
        - Booking History
      summary: Get booking history
      description: Retrieve the status history for a specific booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Booking history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookingHistory'
        '400':
          description: Booking ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No history found for this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Time Slots
  /timeslots/unavailable:
    post:
      tags:
        - Time Slots
      summary: Get unavailable time slots
      description: Retrieve time slots that are fully booked or unavailable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                staffId:
                  type: string
      responses:
        '200':
          description: Unavailable time slots retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TimeSlot'

  /timeslots/one:
    post:
      tags:
        - Time Slots
      summary: Get time slot by ID
      description: Retrieve a specific time slot by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotId
              properties:
                timeSlotId:
                  type: string
      responses:
        '200':
          description: Time slot retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Time slot ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Time slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Payments
  /payments/add:
    post:
      tags:
        - Payments
      summary: Create a payment
      description: Process a new payment for a booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Payment'
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments:
    get:
      tags:
        - Payments
      summary: Get all payments
      description: Retrieve all payments in the system
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'
        '404':
          description: No payments found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/booking:
    post:
      tags:
        - Payments
      summary: Get payments by booking
      description: Retrieve all payments for a specific booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'
        '400':
          description: Booking ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No payments found for this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/refund:
    post:
      tags:
        - Payments
      summary: Process payment refund
      description: Process a refund for a payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentId
              properties:
                paymentId:
                  type: string
                refundReason:
                  type: string
                refundAmount:
                  type: number
                  format: float
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Payment'
        '400':
          description: Payment ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'