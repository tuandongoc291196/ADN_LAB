openapi: 3.0.0
info:
  title: ADN LAB API
  description: Comprehensive API documentation for ADN LAB booking and management system
  version: 1.0.0
  contact:
    name: ADN LAB Team
    email: support@adnlab.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5001/su25-swp391-g8/us-central1/app
    description: Local development server
  - url: https://app-bggwpxm32a-uc.a.run.app
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        fullname:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        gender:
          type: string
          enum: [male, female, other]
        avatar:
          type: string
          description: URL to user's avatar image
        phone:
          type: string
          description: User's phone number
        address:
          type: string
          description: User's address
        accountStatus:
          type: string
          enum: [active, inactive, suspended]
        authProvider:
          type: string
          enum: [email, google, facebook]
        roleId:
          type: string
          description: Reference to user's role
        role:
          $ref: '#/components/schemas/Role'
        dailySlotCount:
          type: integer
          description: Current daily slot count for staff
        maxDailySlots:
          type: integer
          description: Maximum daily slots for staff
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
          description: Unique role identifier
        name:
          type: string
          description: Role name
        description:
          type: string
          description: Role description

    Service:
      type: object
      properties:
        id:
          type: string
          description: Unique service identifier
        title:
          type: string
          description: Service title
        description:
          type: string
          description: Short service description
        fullDescription:
          type: string
          description: Detailed service description
        price:
          type: number
          format: float
          description: Service price
        duration:
          type: string
          description: Service duration
        categoryId:
          type: string
          description: Reference to service category
        category:
          $ref: '#/components/schemas/Category'
        icon:
          type: string
          description: Service icon URL or identifier
        featured:
          type: boolean
          description: Whether service is featured
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          description: Unique category identifier
        name:
          type: string
          description: Category name
        description:
          type: string
          description: Category description
        hasLegalValue:
          type: boolean
          description: Whether category has legal implications

    Method:
      type: object
      properties:
        id:
          type: string
          description: Unique method identifier
        name:
          type: string
          description: Method name
        description:
          type: string
          description: Method description

    Booking:
      type: object
      properties:
        id:
          type: string
          description: Unique booking identifier
        userId:
          type: string
          description: Reference to user who made the booking
        staffId:
          type: string
          description: Reference to assigned staff member
        timeSlotId:
          type: string
          description: Reference to time slot
        serviceId:
          type: string
          description: Reference to booked service
        methodId:
          type: string
          description: Reference to booking method
        totalAmount:
          type: number
          format: float
          description: Total booking amount
        expiresAt:
          type: string
          format: date-time
          description: Booking expiration time
        createdAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
          description: Unique payment identifier
        bookingId:
          type: string
          description: Reference to associated booking
        amount:
          type: number
          format: float
          description: Payment amount
        paymentMethod:
          type: string
          enum: [MOMO, VNPAY, ZALOPAY]
          description: Payment method used
        status:
          type: string
          enum: [pending, success, failed, refunded]
          description: Payment status
        paymentDate:
          type: string
          format: date
          description: Date of payment
        refundDetail:
          type: string
          description: Refund details if applicable
        otherDetails:
          type: array
          items:
            type: string
          description: Additional payment details

    Participant:
      type: object
      properties:
        name:
          type: string
          description: Participant's name
        age:
          type: integer
          minimum: 0
          description: Participant's age
        gender:
          type: string
          enum: [male, female, other]
          description: Participant's gender

    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
        status:
          type: string
          enum: [success, error]
          description: Response status
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Response data
        error:
          type: string
          description: Error message if applicable

security:
  - BearerAuth: []

paths:
  /:
    get:
      tags:
        - General
      summary: API Health Check
      description: Basic endpoint to check if the API is running
      responses:
        '200':
          description: API is running
          content:
            text/plain:
              schema:
                type: string
                example: "Hey there. We've been trying to reach you concerning your vehicle's extended warrant. For Swagger, visit /api-docs"

  # Services Endpoints
  /services/add:
    post:
      tags:
        - Services
      summary: Add a new service
      description: Create a new service with associated methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - fullDescription
                - price
                - duration
                - categoryId
                - icon
                - featured
                - methods
              properties:
                title:
                  type: string
                  description: Service title
                description:
                  type: string
                  description: Short service description
                fullDescription:
                  type: string
                  description: Detailed service description
                price:
                  type: number
                  format: float
                  description: Service price
                duration:
                  type: string
                  description: Service duration
                categoryId:
                  type: string
                  description: Category ID
                icon:
                  type: string
                  description: Service icon
                featured:
                  type: boolean
                  description: Whether service is featured
                methods:
                  type: array
                  items:
                    type: string
                  description: Array of method IDs
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - validation error
        '500':
          description: Internal server error

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      description: Retrieve all services with their categories
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '404':
          description: No services found
        '500':
          description: Internal server error
    
    post:
      tags:
        - Services
      summary: Get a specific service
      description: Retrieve a service by its ID along with associated methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  description: Service ID to retrieve
      responses:
        '200':
          description: Service retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          service:
                            $ref: '#/components/schemas/Service'
                          methods:
                            type: array
                            items:
                              $ref: '#/components/schemas/Method'
        '400':
          description: Bad request - serviceId required
        '404':
          description: Service not found
        '500':
          description: Internal server error

    put:
      tags:
        - Services
      summary: Update a service
      description: Update an existing service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Service ID to update
                title:
                  type: string
                description:
                  type: string
                fullDescription:
                  type: string
                price:
                  type: number
                  format: float
                duration:
                  type: string
                categoryId:
                  type: string
                icon:
                  type: string
                featured:
                  type: boolean
      responses:
        '200':
          description: Service updated successfully
        '400':
          description: Bad request
        '404':
          description: Service not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Services
      summary: Delete a service
      description: Delete an existing service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  description: Service ID to delete
      responses:
        '200':
          description: Service deleted successfully
        '400':
          description: Bad request
        '404':
          description: Service not found
        '500':
          description: Internal server error

  /services/category:
    post:
      tags:
        - Services
      summary: Get services by category
      description: Retrieve services belonging to a specific category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
              properties:
                categoryId:
                  type: string
                  description: Category ID to filter by
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '400':
          description: Bad request
        '404':
          description: No services found for category
        '500':
          description: Internal server error

  # Methods Endpoints
  /methods:
    get:
      tags:
        - Methods
      summary: Get all methods
      description: Retrieve all available methods
      responses:
        '200':
          description: Methods retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Method'
        '404':
          description: No methods found
        '500':
          description: Internal server error

    post:
      tags:
        - Methods
      summary: Get a specific method
      description: Retrieve a method by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  description: Method ID to retrieve
      responses:
        '200':
          description: Method retrieved successfully
        '400':
          description: Bad request
        '404':
          description: Method not found
        '500':
          description: Internal server error

  # Method-Service Relationships
  /method/services:
    post:
      tags:
        - Method Services
      summary: Get services by method
      description: Retrieve services that support a specific method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  description: Method ID to get services for
      responses:
        '200':
          description: Services retrieved successfully
        '400':
          description: Bad request
        '404':
          description: No services found for method
        '500':
          description: Internal server error

  /service/methods:
    post:
      tags:
        - Method Services
      summary: Get methods by service
      description: Retrieve methods supported by a specific service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  description: Service ID to get methods for
      responses:
        '200':
          description: Methods retrieved successfully
        '400':
          description: Bad request
        '404':
          description: No methods found for service
        '500':
          description: Internal server error

  # Users Endpoints
  /users/add:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user account with role assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - roleId
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  description: User's password
                name:
                  type: string
                  description: User's full name
                roleId:
                  type: string
                  description: Role ID to assign to user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - validation error
        '404':
          description: Role not found
        '500':
          description: Internal server error

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users with pagination
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

    post:
      tags:
        - Users
      summary: Get a specific user
      description: Retrieve a user by their ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to retrieve
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      tags:
        - Users
      summary: Update user information
      description: Update user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to update
                fullname:
                  type: string
                  description: User's full name
                gender:
                  type: string
                  enum: [male, female, other]
                avatar:
                  type: string
                  description: Avatar URL
                phone:
                  type: string
                  description: Phone number
                address:
                  type: string
                  description: User's address
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Internal server error

  /users/role:
    post:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve users with a specific role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  description: Role ID to filter by
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: No users found for role
        '500':
          description: Internal server error

  /users/role/staff:
    put:
      tags:
        - Users
      summary: Update user role to staff
      description: Promote a user to staff role and create staff record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: string
                  description: User ID to update
                roleId:
                  type: string
                  description: Staff role ID
      responses:
        '200':
          description: User role updated to staff successfully
        '400':
          description: Bad request
        '404':
          description: User or role not found
        '500':
          description: Internal server error

  /users/role/admin:
    put:
      tags:
        - Users
      summary: Update user role to admin
      description: Promote a user to admin role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: string
                  description: User ID to update
                roleId:
                  type: string
                  description: Admin role ID
      responses:
        '200':
          description: User role updated to admin successfully
        '400':
          description: Bad request
        '404':
          description: User or role not found
        '500':
          description: Internal server error

  # Roles Endpoints
  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      description: Retrieve all available roles
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '404':
          description: No roles found
        '500':
          description: Internal server error

    post:
      tags:
        - Roles
      summary: Get a specific role
      description: Retrieve a role by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  description: Role ID to retrieve
      responses:
        '200':
          description: Role retrieved successfully
        '400':
          description: Bad request
        '404':
          description: Role not found
        '500':
          description: Internal server error

    put:
      tags:
        - Roles
      summary: Update a role
      description: Update an existing role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  description: Role ID to update
                name:
                  type: string
                  description: Role name
                description:
                  type: string
                  description: Role description
      responses:
        '200':
          description: Role updated successfully
        '400':
          description: Bad request
        '404':
          description: Role not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Delete an existing role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  description: Role ID to delete
      responses:
        '200':
          description: Role deleted successfully
        '400':
          description: Bad request
        '404':
          description: Role not found
        '500':
          description: Internal server error

  /roles/add:
    post:
      tags:
        - Roles
      summary: Add a new role
      description: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  description: Role name
                description:
                  type: string
                  description: Role description
      responses:
        '201':
          description: Role created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

  # Bookings Endpoints
  /bookings/add:
    post:
      tags:
        - Bookings
      summary: Create a new booking
      description: Create a new booking with participants and automatic staff assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - slotDate
                - startTime
                - endTime
                - methodId
                - serviceId
                - totalAmount
                - participants
              properties:
                userId:
                  type: string
                  description: User ID making the booking
                slotDate:
                  type: string
                  format: date
                  description: Date of the booking slot
                startTime:
                  type: string
                  description: Start time of the booking
                endTime:
                  type: string
                  description: End time of the booking
                methodId:
                  type: string
                  description: Method ID for the booking
                serviceId:
                  type: string
                  description: Service ID for the booking
                totalAmount:
                  type: number
                  format: float
                  minimum: 0
                  description: Total booking amount
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/Participant'
                  description: Array of participants
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request - validation error
        '404':
          description: User, service, or method not found
        '409':
          description: Booking already exists
        '500':
          description: Internal server error

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get all bookings
      description: Retrieve all bookings
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '404':
          description: No bookings found
        '500':
          description: Internal server error

    post:
      tags:
        - Bookings
      summary: Get a specific booking
      description: Retrieve a booking by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
                  description: Booking ID to retrieve
      responses:
        '200':
          description: Booking retrieved successfully
        '400':
          description: Bad request
        '404':
          description: Booking not found
        '500':
          description: Internal server error

  /bookings/timeslot:
    post:
      tags:
        - Bookings
      summary: Get bookings by time slot
      description: Retrieve bookings for a specific time slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotId
              properties:
                timeSlotId:
                  type: string
                  description: Time slot ID to filter by
      responses:
        '200':
          description: Bookings retrieved successfully
        '400':
          description: Bad request
        '404':
          description: No bookings found for time slot
        '500':
          description: Internal server error

  /bookings/user:
    post:
      tags:
        - Bookings
      summary: Get bookings by user
      description: Retrieve bookings for a specific user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to filter by
      responses:
        '200':
          description: Bookings retrieved successfully
        '400':
          description: Bad request
        '404':
          description: No bookings found for user
        '500':
          description: Internal server error

  /bookings/staff:
    post:
      tags:
        - Bookings
      summary: Get bookings by staff
      description: Retrieve bookings assigned to a specific staff member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - staffId
              properties:
                staffId:
                  type: string
                  description: Staff ID to filter by
      responses:
        '200':
          description: Bookings retrieved successfully
        '400':
          description: Bad request
        '404':
          description: No bookings found for staff
        '500':
          description: Internal server error

  # Payments Endpoints
  /payments/add:
    post:
      tags:
        - Payments
      summary: Process a payment
      description: Process a payment for a booking using specified payment method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
                - amount
                - paymentMethod
              properties:
                bookingId:
                  type: string
                  description: Booking ID to pay for
                amount:
                  type: number
                  format: float
                  description: Payment amount
                paymentMethod:
                  type: string
                  enum: [MOMO, VNPAY, ZALOPAY]
                  description: Payment method to use
      responses:
        '200':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        description: Payment gateway response data
        '400':
          description: Bad request - validation error or invalid payment method
        '404':
          description: Booking not found
        '500':
          description: Internal server error

tags:
  - name: General
    description: General API endpoints
  - name: Services
    description: Service management endpoints
  - name: Methods
    description: Method management endpoints
  - name: Method Services
    description: Method-Service relationship endpoints
  - name: Users
    description: User management endpoints
  - name: Roles
    description: Role management endpoints
  - name: Bookings
    description: Booking management endpoints
  - name: Payments
    description: Payment processing endpoints