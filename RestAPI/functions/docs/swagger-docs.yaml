openapi: 3.0.0
info:
  title: ADN LAB API
  description: API documentation for ADN Laboratory Management System
  version: 1.0.0
  contact:
    name: ADN Lab Team
    email: support@adnlab.com

servers:
  - url: http://localhost:5001/su25-swp391-g8/us-central1/app/
    description: Local development server
  - url: https://app-bggwpxm32a-uc.a.run.app/
    description: Production server

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        status:
          type: string
          enum: [success, error]
          example: success
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
          example: error
        message:
          type: string
          example: Validation error occurred

    User:
      type: object
      properties:
        id:
          type: string
          example: user_123
        fullname:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        accountStatus:
          type: string
          enum: [active, inactive, suspended]
          example: active
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
          example: role_1
        name:
          type: string
          example: Administrator
        description:
          type: string
          example: Full system access
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        id:
          type: string
          example: service_1
        title:
          type: string
          example: Blood Test
        description:
          type: string
          example: Complete blood count analysis
        fullDescription:
          type: string
          example: Comprehensive blood analysis including CBC, chemistry panel, and more
        price:
          type: number
          format: float
          example: 99.99
        duration:
          type: integer
          example: 30
        categoryId:
          type: string
          example: category_1
        category:
          $ref: '#/components/schemas/Category'
        icon:
          type: string
          example: blood-test-icon
        featured:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          example: category_1
        name:
          type: string
          example: Blood Tests
        description:
          type: string
          example: Various blood analysis services
        hasLegalValue:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Method:
      type: object
      properties:
        id:
          type: string
          example: method_1
        name:
          type: string
          example: ELISA
        description:
          type: string
          example: Enzyme-linked immunosorbent assay
        price:
          type: number
          format: float
          example: 50.00
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Booking:
      type: object
      properties:
        id:
          type: string
          example: booking_1
        userId:
          type: string
          example: user_123
        user:
          $ref: '#/components/schemas/User'
        staffId:
          type: string
          example: staff_456
        staff:
          $ref: '#/components/schemas/User'
        timeSlotId:
          type: string
          example: timeslot_789
        timeSlot:
          $ref: '#/components/schemas/TimeSlot'
        serviceId:
          type: string
          example: service_1
        service:
          $ref: '#/components/schemas/Service'
        methodId:
          type: string
          example: method_1
        method:
          $ref: '#/components/schemas/Method'
        totalAmount:
          type: number
          format: float
          example: 149.99
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TimeSlot:
      type: object
      properties:
        id:
          type: string
          example: 2024-01-15_09:00_10:00
        slotDate:
          type: string
          format: date
          example: 2024-01-15
        startTime:
          type: string
          example: 09:00
        endTime:
          type: string
          example: 10:00
        currentBookings:
          type: integer
          example: 3
        notes:
          type: string
          example: Regular operating hours

    Participant:
      type: object
      properties:
        id:
          type: string
          example: participant_1
        name:
          type: string
          example: Jane Smith
        age:
          type: integer
          example: 30
        identification:
          type: string
          example: ID123456789
        gender:
          type: string
          enum: [male, female, other]
          example: female
        relationship:
          type: string
          example: spouse
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
          example: payment_1
        bookingId:
          type: string
          example: booking_1
        amount:
          type: number
          format: float
          example: 149.99
        paymentMethod:
          type: string
          enum: [MOMO, VNPAY, ZALOPAY]
          example: MOMO
        status:
          type: string
          enum: [pending, completed, failed]
          example: completed
        createdAt:
          type: string
          format: date-time

paths:
  /:
    get:
      summary: API Health Check
      description: Returns a welcome message and API status
      responses:
        '200':
          description: API is running
          content:
            text/plain:
              schema:
                type: string
                example: "Hey there. We've been trying to reach you concerning your vehicle's extended warrant. For Swagger, visit /api-docs"

  /services/add:
    post:
      tags:
        - Services
      summary: Add a new service
      description: Create a new laboratory service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - fullDescription
                - price
                - duration
                - categoryId
                - icon
                - featured
                - methods
              properties:
                title:
                  type: string
                  example: Blood Test Analysis
                description:
                  type: string
                  example: Complete blood count and analysis
                fullDescription:
                  type: string
                  example: Comprehensive blood analysis including complete blood count, chemistry panel, and lipid profile
                price:
                  type: number
                  format: float
                  example: 99.99
                duration:
                  type: integer
                  example: 30
                categoryId:
                  type: string
                  example: category_1
                icon:
                  type: string
                  example: blood-test-icon
                featured:
                  type: boolean
                  example: true
                methods:
                  type: array
                  items:
                    type: string
                  example: ["method_1", "method_2"]
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      description: Retrieve a list of all available services
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Services
      summary: Get a specific service
      description: Retrieve details of a specific service by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  example: service_1
      responses:
        '200':
          description: Service retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Service'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Services
      summary: Update a service
      description: Update an existing service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  example: service_1
                title:
                  type: string
                  example: Updated Blood Test Analysis
                description:
                  type: string
                  example: Updated description
                fullDescription:
                  type: string
                  example: Updated full description
                price:
                  type: number
                  format: float
                  example: 109.99
                duration:
                  type: integer
                  example: 45
                categoryId:
                  type: string
                  example: category_1
                icon:
                  type: string
                  example: updated-icon
                featured:
                  type: boolean
                  example: false
                methods:
                  type: array
                  items:
                    type: string
                  example: ["method_1", "method_3"]
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Services
      summary: Delete a service
      description: Delete an existing service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  example: service_1
      responses:
        '200':
          description: Service deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services/category:
    post:
      tags:
        - Services
      summary: Get services by category
      description: Retrieve all services belonging to a specific category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
              properties:
                categoryId:
                  type: string
                  example: category_1
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
        '400':
          description: Category ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /methods:
    get:
      tags:
        - Methods
      summary: Get all methods
      description: Retrieve a list of all available laboratory methods
      responses:
        '200':
          description: Methods retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Method'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Methods
      summary: Get a specific method
      description: Retrieve details of a specific method by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  example: method_1
      responses:
        '200':
          description: Method retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Method'
        '400':
          description: Method ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /method/services:
    post:
      tags:
        - Method Services
      summary: Get services by method
      description: Retrieve all services that use a specific method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  example: service_1
      responses:
        '200':
          description: Method services retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Service ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /service/methods:
    post:
      tags:
        - Method Services
      summary: Get methods by service
      description: Retrieve all methods available for a specific service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  example: method_1
      responses:
        '200':
          description: Service methods retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Method ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/add:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - roleId
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
                name:
                  type: string
                  example: John Doe
                roleId:
                  type: string
                  example: role_1
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Users
      summary: Get a specific user
      description: Retrieve details of a specific user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: user_123
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update a user
      description: Update user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: user_123
                fullname:
                  type: string
                  example: John Updated Doe
                email:
                  type: string
                  format: email
                  example: john.updated@example.com
                accountStatus:
                  type: string
                  enum: [active, inactive, suspended]
                  example: active
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role:
    post:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  example: role_1
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role/staff:
    put:
      tags:
        - Users
      summary: Update user role to staff
      description: Promote a user to staff role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: string
                  example: user_123
                roleId:
                  type: string
                  example: staff_role_id
      responses:
        '200':
          description: User role updated to staff successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/role/admin:
    put:
      tags:
        - Users
      summary: Update user role to admin
      description: Promote a user to admin role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: string
                  example: user_123
                roleId:
                  type: string
                  example: admin_role_id
      responses:
        '200':
          description: User role updated to admin successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/status:
    put:
      tags:
        - Users
      summary: Update user account status
      description: Update the account status of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - accountStatus
              properties:
                userId:
                  type: string
                  example: user_123
                accountStatus:
                  type: string
                  enum: [active, inactive, suspended]
                  example: active
      responses:
        '200':
          description: User account status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      description: Retrieve a list of all roles
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Roles
      summary: Get a specific role
      description: Retrieve details of a specific role by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  example: role_1
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Role'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Roles
      summary: Update a role
      description: Update role information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  example: role_1
                name:
                  type: string
                  example: Updated Role Name
                description:
                  type: string
                  example: Updated role description
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Delete an existing role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  example: role_1
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Role ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /roles/add:
    post:
      tags:
        - Roles
      summary: Add a new role
      description: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - name
                - description
              properties:
                id:
                  type: string
                  example: role_new
                name:
                  type: string
                  example: New Role
                description:
                  type: string
                  example: Description for the new role
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/add:
    post:
      tags:
        - Bookings
      summary: Add a new booking
      description: Create a new appointment booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - slotDate
                - startTime
                - endTime
                - methodId
                - serviceId
                - totalAmount
                - participants
              properties:
                userId:
                  type: string
                  example: user_123
                slotDate:
                  type: string
                  format: date
                  example: 2024-01-15
                startTime:
                  type: string
                  example: "09:00"
                endTime:
                  type: string
                  example: "10:00"
                methodId:
                  type: string
                  example: method_1
                serviceId:
                  type: string
                  example: service_1
                totalAmount:
                  type: number
                  format: float
                  example: 149.99
                participants:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Jane Smith
                      age:
                        type: integer
                        example: 30
                      identification:
                        type: string
                        example: ID123456789
                      gender:
                        type: string
                        enum: [male, female, other]
                        example: female
                      relationship:
                        type: string
                        example: spouse
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User, service, or method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get all bookings
      description: Retrieve a list of all bookings
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Bookings
      summary: Get a specific booking
      description: Retrieve details of a specific booking by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
                  example: booking_1
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Booking'
        '400':
          description: Booking ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/timeslot:
    post:
      tags:
        - Bookings
      summary: Get bookings by time slot
      description: Retrieve all bookings for a specific time slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotId
              properties:
                timeSlotId:
                  type: string
                  example: 2024-01-15_09:00_10:00
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: Time slot ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/user:
    post:
      tags:
        - Bookings
      summary: Get bookings by user
      description: Retrieve all bookings for a specific user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: user_123
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: User ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/staff:
    post:
      tags:
        - Bookings
      summary: Get bookings by staff
      description: Retrieve all bookings assigned to a specific staff member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - staffId
              properties:
                staffId:
                  type: string
                  example: staff_456
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
        '400':
          description: Staff ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /timeslots/unavailable:
    post:
      tags:
        - Time Slots
      summary: Get unavailable time slots
      description: Retrieve time slots that are fully booked for a specific date
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotDate
              properties:
                slotDate:
                  type: string
                  format: date
                  example: 2024-01-15
      responses:
        '200':
          description: Unavailable time slots retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Slot date is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /timeslots/one:
    post:
      tags:
        - Time Slots
      summary: Get a specific time slot
      description: Retrieve details of a specific time slot by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotId
              properties:
                timeSlotId:
                  type: string
                  example: 2024-01-15_09:00_10:00
      responses:
        '200':
          description: Time slot retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Time slot ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Time slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/add:
    post:
      tags:
        - Payments
      summary: Add a new payment
      description: Process a payment for a booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
                - amount
                - paymentMethod
              properties:
                bookingId:
                  type: string
                  example: booking_1
                amount:
                  type: number
                  format: float
                  example: 149.99
                paymentMethod:
                  type: string
                  enum: [MOMO, VNPAY, ZALOPAY]
                  example: MOMO
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          paymentUrl:
                            type: string
                            description: URL to redirect user for payment
                            example: https://payment.gateway.com/pay?token=abc123
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Payment processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Services
    description: Laboratory services management
  - name: Methods
    description: Laboratory testing methods
  - name: Method Services
    description: Relationship between methods and services
  - name: Users
    description: User account management
  - name: Roles
    description: User role management
  - name: Bookings
    description: Appointment booking management
  - name: Time Slots
    description: Available time slot management
  - name: Payments
    description: Payment processing
