openapi: 3.0.0
info:
  title: ADN Lab API
  description: API documentation for ADN Lab management system
  version: 1.0.0
  contact:
    name: ADN Lab Team
    email: support@adnlab.com

servers:
  - url: http://localhost:5001
    description: Development server
  - url: https://app-bggwpxm32a-uc.a.run.app
    description: Production server

tags:
  - name: Blogs
    description: Blog management endpoints
  - name: Services
    description: Service management endpoints
  - name: Methods
    description: Method management endpoints
  - name: Users
    description: User management endpoints
  - name: Staffs
    description: Staff management endpoints
  - name: Roles
    description: Role management endpoints
  - name: Bookings
    description: Booking management endpoints
  - name: Booking History
    description: Booking history endpoints
  - name: Time Slots
    description: Time slot management endpoints
  - name: Samples
    description: Sample management endpoints
  - name: Test Results
    description: Test result management endpoints
  - name: Payments
    description: Payment management endpoints

paths:
  /:
    get:
      tags:
        - General
      summary: API health check
      description: Basic health check endpoint
      responses:
        '200':
          description: API is running
          content:
            text/plain:
              schema:
                type: string
                example: "Hey there. We've been trying to reach you concerning your vehicle's extended warrant. For Swagger, visit /api-docs"

  # Blog endpoints
  /blogs/add:
    post:
      tags:
        - Blogs
      summary: Add a new blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                author:
                  type: string
                category:
                  type: string
      responses:
        '200':
          description: Blog created successfully
        '400':
          description: Bad request

  /blogs:
    get:
      tags:
        - Blogs
      summary: Get all blogs
      responses:
        '200':
          description: List of all blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    post:
      tags:
        - Blogs
      summary: Get one blog by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Blog details
        '404':
          description: Blog not found
    put:
      tags:
        - Blogs
      summary: Update a blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Blog updated successfully
    delete:
      tags:
        - Blogs
      summary: Delete a blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Blog deleted successfully

  # Service endpoints
  /services/add:
    post:
      tags:
        - Services
      summary: Add a new service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                categoryId:
                  type: string
      responses:
        '200':
          description: Service created successfully

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      responses:
        '200':
          description: List of all services
    post:
      tags:
        - Services
      summary: Get one service by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Service details
    put:
      tags:
        - Services
      summary: Update a service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
      responses:
        '200':
          description: Service updated successfully
    delete:
      tags:
        - Services
      summary: Delete a service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Service deleted successfully

  /services/category:
    post:
      tags:
        - Services
      summary: Get services by category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryId:
                  type: string
      responses:
        '200':
          description: List of services in category

  /services/status:
    put:
      tags:
        - Services
      summary: Update service status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Service status updated

  /services/featured:
    put:
      tags:
        - Services
      summary: Update service featured status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                featured:
                  type: boolean
      responses:
        '200':
          description: Service featured status updated

  # Method Service endpoints
  /method/services:
    post:
      tags:
        - Methods
      summary: Get method services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                methodId:
                  type: string
      responses:
        '200':
          description: List of method services

  /service/methods:
    post:
      tags:
        - Methods
      summary: Get services by method ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                methodId:
                  type: string
      responses:
        '200':
          description: List of services for method

  # Method endpoints
  /methods:
    get:
      tags:
        - Methods
      summary: Get all methods
      responses:
        '200':
          description: List of all methods
    post:
      tags:
        - Methods
      summary: Get one method by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Method details

  # User endpoints
  /users/add:
    post:
      tags:
        - Users
      summary: Add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: User created successfully

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List of all users
    post:
      tags:
        - Users
      summary: Get one user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: User details
    put:
      tags:
        - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
    delete:
      tags:
        - Users
      summary: Delete a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: User deleted successfully

  /users/role:
    post:
      tags:
        - Users
      summary: Get users by role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        '200':
          description: List of users with specified role

  /users/role/staff:
    put:
      tags:
        - Users
      summary: Update user role to staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: User role updated to staff

  /users/role/admin:
    put:
      tags:
        - Users
      summary: Update user role to admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: User role updated to admin

  /users/status:
    put:
      tags:
        - Users
      summary: Update user account status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: User account status updated

  # Staff endpoints
  /staffs:
    get:
      tags:
        - Staffs
      summary: Get all staffs
      responses:
        '200':
          description: List of all staffs
    post:
      tags:
        - Staffs
      summary: Get staff by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Staff details
    put:
      tags:
        - Staffs
      summary: Update staff information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                position:
                  type: string
      responses:
        '200':
          description: Staff updated successfully

  # Role endpoints
  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      responses:
        '200':
          description: List of all roles
    post:
      tags:
        - Roles
      summary: Get one role by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Role details
    put:
      tags:
        - Roles
      summary: Update a role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Role updated successfully
    delete:
      tags:
        - Roles
      summary: Delete a role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Role deleted successfully

  /roles/add:
    post:
      tags:
        - Roles
      summary: Add a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Role created successfully

  # Booking endpoints
  /bookings/add:
    post:
      tags:
        - Bookings
      summary: Add a new booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                serviceId:
                  type: string
                timeSlotId:
                  type: string
                staffId:
                  type: string
      responses:
        '200':
          description: Booking created successfully

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get all bookings
      responses:
        '200':
          description: List of all bookings
    post:
      tags:
        - Bookings
      summary: Get one booking by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Booking details
    delete:
      tags:
        - Bookings
      summary: Delete booking by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Booking deleted successfully

  /bookings/timeslot:
    post:
      tags:
        - Bookings
      summary: Get booking by time slot ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeSlotId:
                  type: string
      responses:
        '200':
          description: Booking details for time slot

  /bookings/user:
    post:
      tags:
        - Bookings
      summary: Get bookings by user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: List of user bookings

  /bookings/staff:
    post:
      tags:
        - Bookings
      summary: Get bookings by staff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  type: string
      responses:
        '200':
          description: List of staff bookings

  /bookings/cancel/user:
    post:
      tags:
        - Bookings
      summary: Cancel booking by user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                userId:
                  type: string
      responses:
        '200':
          description: Booking cancelled by user

  /bookings/cancel/manager:
    post:
      tags:
        - Bookings
      summary: Cancel booking by manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                managerId:
                  type: string
                reason:
                  type: string
      responses:
        '200':
          description: Booking cancelled by manager

  /bookings/time:
    put:
      tags:
        - Bookings
      summary: Update booking time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                newTimeSlotId:
                  type: string
      responses:
        '200':
          description: Booking time updated

  # Booking History endpoints
  /booking/history/add:
    post:
      tags:
        - Booking History
      summary: Add booking history by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                action:
                  type: string
                details:
                  type: string
      responses:
        '200':
          description: Booking history added

  /booking/history:
    post:
      tags:
        - Booking History
      summary: Get booking histories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: List of booking histories

  # Time Slot endpoints
  /timeslots/unavailable:
    post:
      tags:
        - Time Slots
      summary: Get unavailable time slots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                staffId:
                  type: string
      responses:
        '200':
          description: List of unavailable time slots

  /timeslots/one:
    post:
      tags:
        - Time Slots
      summary: Get one time slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Time slot details

  # Sample endpoints
  /samples/booking:
    post:
      tags:
        - Samples
      summary: Get sample by booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Sample details for booking

  /samples:
    put:
      tags:
        - Samples
      summary: Update sample
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                status:
                  type: string
                results:
                  type: object
      responses:
        '200':
          description: Sample updated successfully

  # Test Result endpoints
  /testresult/booking:
    post:
      tags:
        - Test Results
      summary: Get test result by booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: Test result for booking

  /testresult/user:
    post:
      tags:
        - Test Results
      summary: Get test results by user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: List of test results for user

  /testresult/staff:
    post:
      tags:
        - Test Results
      summary: Get test results by staff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  type: string
      responses:
        '200':
          description: List of test results for staff

  /testresult:
    put:
      tags:
        - Test Results
      summary: Update test result
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                results:
                  type: object
                status:
                  type: string
      responses:
        '200':
          description: Test result updated successfully

  # Payment endpoints
  /payments/add:
    post:
      tags:
        - Payments
      summary: Add a new payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                amount:
                  type: number
                method:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Payment created successfully

  /payments:
    get:
      tags:
        - Payments
      summary: Get all payments
      responses:
        '200':
          description: List of all payments

  /payments/booking:
    post:
      tags:
        - Payments
      summary: Get payments for booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
      responses:
        '200':
          description: List of payments for booking

  /payments/refund:
    post:
      tags:
        - Payments
      summary: Refund payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                reason:
                  type: string
                amount:
                  type: number
      responses:
        '200':
          description: Payment refunded successfully

components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
    
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
    
    Service:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: string
        status:
          type: string
        featured:
          type: boolean
    
    Booking:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        serviceId:
          type: string
        timeSlotId:
          type: string
        staffId:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
    
    Payment:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        amount:
          type: number
        method:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
