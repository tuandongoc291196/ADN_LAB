openapi: 3.0.0
info:
  title: ADN LAB API
  version: 1.0.0
  description: |
    # ADN LAB API Documentation

    Welcome to the ADN LAB API documentation. This API provides comprehensive access to DNA laboratory services, payment processing, and user management.

    ## Features

    - **üß¨ DNA Testing Services**: Comprehensive DNA analysis and testing services
    - **üí≥ Payment Processing**: Support for multiple payment gateways (MOMO, VNPAY, ZALOPAY)
    - **üë• User Management**: Complete user account and profile management
    - **üîê Role-Based Access**: Secure access control with role-based permissions
    - **üìÖ Appointment Booking**: Schedule and manage DNA testing appointments
    - **‚è∞ Time Slot Management**: Efficient time slot allocation and tracking

    ## Quick Start

    1. **Authentication**: Obtain a JWT token through Firebase Authentication
    2. **Base URL**: Use the appropriate base URL for your environment
    3. **Headers**: Include `Authorization: Bearer <token>` for authenticated endpoints
    4. **Content-Type**: Use `application/json` for request bodies

    ## Payment Integration

    This API supports three major payment gateways in Vietnam:
    - **MOMO**: Mobile money payments
    - **VNPAY**: Vietnam's leading payment gateway
    - **ZALOPAY**: Digital wallet payments

    ## Rate Limiting

    - **Authenticated Users**: 1000 requests per hour
    - **Public Endpoints**: 100 requests per hour

    ## Response Format

    All API responses follow a consistent format:
    ```json
    {
      "statusCode": 200,
      "status": "success",
      "message": "Operation completed successfully",
      "data": { ... }
    }
    ```

    ## Error Handling

    Error responses include detailed information:
    ```json
    {
      "statusCode": 400,
      "message": "Invalid request",
      "error": "Detailed error description"
    }
    ```

    *Last updated: June 2025*
  contact:
    name: ADN LAB Support Team
    email: support@adnlab.vn
    url: https://adnlab.vn
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5001/su25-swp391-g8/us-central1/app
    description: Development server
  - url: https://app-bggwpxm32a-uc.a.run.app
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Services
    description: DNA services and collection methods endpoints
  - name: Methods
    description: Collection methods management
  - name: Method Services
    description: Method-Service relationship endpoints
  - name: Users
    description: User management endpoints
  - name: Roles
    description: Role management endpoints for user access control
  - name: Payments
    description: Payment management endpoints for MOMO, VNPAY, and ZALOPAY

security:
  - BearerAuth: []

paths:
  /:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Basic health check to verify API is running
      responses:
        '200':
          description: API is running successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Hey there. We've been trying to reach you concerning your vehicle's extended warrant. For Swagger, visit /api-docs"

  # Services Endpoints
  /services/add:
    post:
      tags:
        - Services
      summary: Add a new DNA service
      description: Create a new DNA testing service with all required details
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price
                - category
              properties:
                title:
                  type: string
                  description: Service title
                  example: "Paternity DNA Test"
                description:
                  type: string
                  description: Brief service description
                  example: "Accurate paternity testing service"
                fullDescription:
                  type: string
                  description: Complete service description
                  example: "Comprehensive paternity DNA analysis with 99.9% accuracy"
                price:
                  type: number
                  description: Service price in VND
                  example: 1500000
                duration:
                  type: string
                  description: Service duration
                  example: "5-7 days"
                category:
                  type: string
                  description: Service category
                  example: "Paternity Testing"
                serviceType:
                  type: string
                  description: Type of service
                  example: "laboratory"
                hasLegalValue:
                  type: boolean
                  description: Whether service has legal value
                  example: true
                icon:
                  type: string
                  description: Service icon identifier
                  example: "family-icon"
                participants:
                  type: string
                  description: Required participants
                  example: "Father and child"
                requiredDocuments:
                  type: string
                  description: Required documents
                  example: "ID cards, consent forms"
                procedures:
                  type: string
                  description: Service procedures
                  example: "Sample collection, DNA analysis, report generation"
                featured:
                  type: boolean
                  description: Whether service is featured
                  example: false
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services:
    get:
      tags:
        - Services
      summary: Get all DNA services
      description: Retrieve all available DNA testing services with their collection methods
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Services
      summary: Get a specific service by ID
      description: Retrieve detailed information about a specific DNA service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
      responses:
        '200':
          description: Service retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Services
      summary: Update an existing service
      description: Update details of an existing DNA service
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  description: Service ID to update
                  example: "service_123"
                title:
                  type: string
                  description: Updated service title
                  example: "Premium Paternity DNA Test"
                description:
                  type: string
                  description: Updated brief description
                  example: "Enhanced paternity testing with faster results"
                fullDescription:
                  type: string
                  description: Updated complete description
                  example: "Premium paternity DNA analysis with 99.99% accuracy and express processing"
                price:
                  type: number
                  description: Updated service price in VND
                  example: 2000000
                duration:
                  type: string
                  description: Updated service duration
                  example: "3-5 days"
                category:
                  type: string
                  description: Updated service category
                  example: "Premium Paternity Testing"
                serviceType:
                  type: string
                  description: Updated type of service
                  example: "express-laboratory"
                hasLegalValue:
                  type: boolean
                  description: Updated legal value status
                  example: true
                icon:
                  type: string
                  description: Updated service icon
                  example: "premium-family-icon"
                participants:
                  type: string
                  description: Updated required participants
                  example: "Father, mother, and child"
                requiredDocuments:
                  type: string
                  description: Updated required documents
                  example: "Government ID, notarized consent forms"
                procedures:
                  type: string
                  description: Updated service procedures
                  example: "Express sample collection, priority DNA analysis, certified report generation"
                featured:
                  type: boolean
                  description: Updated featured status
                  example: true
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Services
      summary: Delete a service
      description: Remove a DNA service from the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: string
                  description: Service ID to delete
                  example: "service_123"
      responses:
        '200':
          description: Service deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Service deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/category:
    post:
      tags:
        - Services
      summary: Get services by category
      description: Retrieve all services belonging to a specific category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
              properties:
                categoryId:
                  type: string
                  description: Category ID to filter services
                  example: "paternity"
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Method Services Endpoints
  /method/services:
    post:
      tags:
        - Method Services
      summary: Get method services relationship
      description: Retrieve services associated with specific collection methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  description: Method ID to get associated services
                  example: "method_123"
      responses:
        '200':
          description: Method services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Method services retrieved successfully"
                  data:
                    type: object
                    properties:
                      methodServices:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceCollectionMethod'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /service/methods:
    post:
      tags:
        - Method Services
      summary: Get services by method ID
      description: Retrieve all services that support a specific collection method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  description: Method ID to get associated services
                  example: "method_123"
      responses:
        '200':
          description: Services by method retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Methods Endpoints
  /methods:
    get:
      tags:
        - Methods
      summary: Get all collection methods
      description: Retrieve all available sample collection methods
      responses:
        '200':
          description: Methods retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Methods retrieved successfully"
                  data:
                    type: object
                    properties:
                      methods:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              description: Method ID
                              example: "method_123"
                            title:
                              type: string
                              description: Method title
                              example: "Saliva Collection"
                            description:
                              type: string
                              description: Method description
                              example: "Non-invasive saliva sample collection"
                            icon:
                              type: string
                              description: Method icon
                              example: "saliva-icon"
                            color:
                              type: string
                              description: Method color code
                              example: "#FF5733"
                            note:
                              type: string
                              description: Additional notes
                              example: "Avoid eating 30 minutes before collection"
                            process:
                              type: string
                              description: Collection process
                              example: "Spit into provided container"
                            allowedFor:
                              type: string
                              description: Who can use this method
                              example: "All ages"
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Methods
      summary: Get a specific method by ID
      description: Retrieve detailed information about a specific collection method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - methodId
              properties:
                methodId:
                  type: string
                  description: Method ID to retrieve
                  example: "method_123"
      responses:
        '200':
          description: Method retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Method retrieved successfully"
                  data:
                    type: object
                    properties:
                      method:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Method ID
                            example: "method_123"
                          title:
                            type: string
                            description: Method title
                            example: "Saliva Collection"
                          description:
                            type: string
                            description: Method description
                            example: "Non-invasive saliva sample collection"
                          icon:
                            type: string
                            description: Method icon
                            example: "saliva-icon"
                          color:
                            type: string
                            description: Method color code
                            example: "#FF5733"
                          note:
                            type: string
                            description: Additional notes
                            example: "Avoid eating 30 minutes before collection"
                          process:
                            type: string
                            description: Collection process
                            example: "Spit into provided container"
                          allowedFor:
                            type: string
                            description: Who can use this method
                            example: "All ages"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Users Endpoints
  /users/add:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user account in the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullname
                - email
              properties:
                fullname:
                  type: string
                  description: User's full name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                phoneNumber:
                  type: string
                  description: User's phone number
                  example: "+84901234567"
                dateOfBirth:
                  type: string
                  format: date
                  description: User's date of birth
                  example: "1990-01-15"
                address:
                  type: string
                  description: User's address
                  example: "123 Main St, Ho Chi Minh City"
                roleId:
                  type: string
                  description: Role ID to assign to user
                  example: "customer"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: "User already exists"
                  error:
                    type: string
                    example: "A user with this email already exists"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users in the system
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Get a specific user by ID
      description: Retrieve detailed information about a specific user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User retrieved successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user information
      description: Update user profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to update
                  example: "user_12345"
                fullname:
                  type: string
                  description: Updated full name
                  example: "John Smith"
                email:
                  type: string
                  format: email
                  description: Updated email address
                  example: "john.smith@example.com"
                phoneNumber:
                  type: string
                  description: Updated phone number
                  example: "+84901234568"
                dateOfBirth:
                  type: string
                  format: date
                  description: Updated date of birth
                  example: "1990-01-15"
                address:
                  type: string
                  description: Updated address
                  example: "456 New St, Ho Chi Minh City"
                accountStatus:
                  type: string
                  enum: ["active", "inactive", "suspended"]
                  description: Updated account status
                  example: "active"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/role:
    post:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: string
                  description: Role ID to filter users
                  example: "staff"
      responses:
        '200':
          description: Users by role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/role/staff:
    put:
      tags:
        - Users
      summary: Update user role to staff
      description: Promote a user to staff role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to promote to staff
                  example: "user_12345"
                staffPosition:
                  type: string
                  description: Staff position assignment
                  example: "lab_technician"
      responses:
        '200':
          description: User role updated to staff successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User role updated to staff successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/role/admin:
    put:
      tags:
        - Users
      summary: Update user role to admin
      description: Promote a user to admin role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: User ID to promote to admin
                  example: "user_12345"
      responses:
        '200':
          description: User role updated to admin successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User role updated to admin successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Roles Endpoints
  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      description: Retrieve all available roles in the system
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Roles
      summary: Get a specific role by ID
      description: Retrieve detailed information about a specific role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Role retrieved successfully"
                  data:
                    type: object
                    properties:
                      role:
                        $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Roles
      summary: Update a role
      description: Update role information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Role updated successfully"
                  data:
                    type: object
                    properties:
                      role:
                        $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Remove a role from the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRoleRequest'
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Role deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/add:
    post:
      tags:
        - Roles
      summary: Add a new role
      description: Create a new role in the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Role created successfully"
                  data:
                    type: object
                    properties:
                      role:
                        $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: "Role already exists"
                  error:
                    type: string
                    example: "A role with this ID already exists"
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Payments Endpoints
  /payments:
    post:
      tags:
        - Payments
      summary: Create a payment
      description: |
        Create a new payment request for DNA services. Supports multiple payment gateways:
        - **MOMO**: Mobile money payments
        - **VNPAY**: Vietnam's leading payment gateway  
        - **ZALOPAY**: Digital wallet payments
        
        Returns a payment URL where users can complete their payment.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase Authentication JWT token

  schemas:
    # Payment Schemas
    Payment:
      type: object
      properties:
        id:
          type: string
          description: Payment ID
          example: 'PAY_12345'
        totalAmount:
          type: number
          description: Total payment amount in VND
          example: 50000
        paymentChoice:
          type: string
          enum: ['MOMO', 'VNPAY', 'ZALOPAY']
          description: Payment method chosen
          example: 'VNPAY'
        status:
          type: string
          enum: ['pending', 'completed', 'failed', 'refunded']
          description: Payment status
          example: 'completed'
        createdAt:
          type: string
          format: date-time
          description: Payment creation timestamp
          example: '2024-12-06T10:30:00.000Z'

    PaymentRequest:
      type: object
      required: ['totalAmount', 'paymentChoice']
      properties:
        totalAmount:
          type: number
          minimum: 1000
          description: Total payment amount in VND (minimum 1,000 VND)
          example: 50000
        paymentChoice:
          type: string
          enum: ['MOMO', 'VNPAY', 'ZALOPAY']
          description: Payment method - MOMO, VNPAY, or ZALOPAY
          example: 'VNPAY'

    PaymentResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 200
        payUrl:
          type: string
          description: Payment URL to redirect user for payment
          example: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?...'
        message:
          type: string
          description: Response message
          example: 'Payment URL generated successfully'

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: 'user_12345'
        fullname:
          type: string
          description: Full name of the user
          example: 'John Doe'
        email:
          type: string
          format: email
          description: Email address
          example: 'john.doe@example.com'
        phoneNumber:
          type: string
          description: Phone number
          example: '+84901234567'
        dateOfBirth:
          type: string
          format: date
          description: Date of birth
          example: '1990-01-15'
        address:
          type: string
          description: User address
          example: '123 Main St, Ho Chi Minh City'
        accountStatus:
          type: string
          description: Account status
          example: 'active'
        role:
          type: object
          properties:
            id:
              type: string
              description: Role ID
              example: 'role_123'
            name:
              type: string
              description: Role name
              example: 'customer'
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: '2024-12-06T10:30:00.000Z'
        lastLogin:
          type: string
          format: date-time
          description: Last login timestamp
          example: '2024-12-06T15:45:00.000Z'

    UserRequest:
      type: object
      required: ['userId']
      properties:
        userId:
          type: string
          description: User ID to retrieve
          example: 'user_12345'

    UsersResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 200
        status:
          type: string
          description: Response status
          example: 'success'
        message:
          type: string
          description: Response message
          example: 'Users retrieved successfully'
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    # Service Schemas
    Service:
      type: object
      properties:
        id:
          type: string
          description: Service ID
          example: 'service_123'
        title:
          type: string
          description: Service title
          example: 'DNA Analysis'
        description:
          type: string
          description: Brief service description
          example: 'Basic DNA analysis service'
        fullDescription:
          type: string
          description: Complete service description
          example: 'Comprehensive DNA analysis including genetic markers and ancestry information'
        price:
          type: number
          description: Service price in VND
          example: 500000
        duration:
          type: string
          description: Service duration
          example: '5-7 days'
        category:
          type: string
          description: Service category
          example: 'DNA Testing'
        serviceType:
          type: string
          description: Type of service
          example: 'laboratory'
        hasLegalValue:
          type: boolean
          description: Whether service has legal value
          example: true
        icon:
          type: string
          description: Service icon
          example: 'dna-icon'
        participants:
          type: string
          description: Required participants
          example: '1-2 people'
        requiredDocuments:
          type: string
          description: Required documents
          example: 'ID card, consent form'
        procedures:
          type: string
          description: Service procedures
          example: 'Sample collection, analysis, report generation'
        featured:
          type: boolean
          description: Whether service is featured
          example: false
        createdAt:
          type: string
          format: date-time
          description: Service creation timestamp
          example: '2024-12-06T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Service last update timestamp
          example: '2024-12-06T12:30:00.000Z'

    ServiceCollectionMethod:
      type: object
      properties:
        id:
          type: string
          description: Method ID
          example: 'method_123'
        serviceId:
          type: string
          description: Associated service ID
          example: 'service_123'
        methodId:
          type: string
          description: Collection method ID
          example: 'collect_123'
        methodTitle:
          type: string
          description: Collection method title
          example: 'Saliva Collection'
        methodDescription:
          type: string
          description: Method description
          example: 'Non-invasive saliva sample collection'
        methodIcon:
          type: string
          description: Method icon
          example: 'saliva-icon'
        methodColor:
          type: string
          description: Method color code
          example: '#FF5733'
        methodNote:
          type: string
          description: Additional method notes
          example: 'Avoid eating 30 minutes before collection'
        methodProcess:
          type: string
          description: Collection process details
          example: 'Spit into provided container'
        allowedFor:
          type: string
          description: Who can use this method
          example: 'All ages'
        createdAt:
          type: string
          format: date-time
          description: Method creation timestamp
          example: '2024-12-06T10:30:00.000Z'

    ServiceRequest:
      type: object
      required: ['serviceId']
      properties:
        serviceId:
          type: string
          description: Service ID to retrieve
          example: 'service_123'

    ServiceResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 200
        status:
          type: string
          description: Response status
          example: 'success'
        message:
          type: string
          description: Response message
          example: 'Service retrieved successfully'
        data:
          type: object
          properties:
            service:
              $ref: '#/components/schemas/Service'

    ServicesResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 200
        status:
          type: string
          description: Response status
          example: 'success'
        message:
          type: string
          description: Response message
          example: 'Services and methods retrieved successfully'
        data:
          type: object
          properties:
            dnaServices:
              type: array
              items:
                $ref: '#/components/schemas/Service'
            serviceCollectionMethods:
              type: array
              items:
                $ref: '#/components/schemas/ServiceCollectionMethod'

    # Role Schemas
    Role:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: 'admin'
        name:
          type: string
          description: Role name
          example: 'Administrator'
        description:
          type: string
          description: Role description
          example: 'Full system access with administrative privileges'
        createdAt:
          type: string
          format: date-time
          description: Role creation timestamp
          example: '2024-12-06T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Role last update timestamp
          example: '2024-12-06T12:30:00.000Z'

    RoleRequest:
      type: object
      required: ['roleId']
      properties:
        roleId:
          type: string
          description: Role ID to retrieve
          example: 'admin'

    CreateRoleRequest:
      type: object
      required: ['id', 'name', 'description']
      properties:
        id:
          type: string
          description: Unique role ID
          example: 'manager'
        name:
          type: string
          description: Role name
          example: 'Manager'
        description:
          type: string
          description: Role description
          example: 'Manager role with limited administrative access'

    UpdateRoleRequest:
      type: object
      required: ['roleId', 'name', 'description']
      properties:
        roleId:
          type: string
          description: Role ID to update
          example: 'manager'
        name:
          type: string
          description: Updated role name
          example: 'Senior Manager'
        description:
          type: string
          description: Updated role description
          example: 'Senior manager role with extended privileges'

    DeleteRoleRequest:
      type: object
      required: ['roleId']
      properties:
        roleId:
          type: string
          description: Role ID to delete
          example: 'manager'

    RolesResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 200
        status:
          type: string
          description: Response status
          example: 'success'
        message:
          type: string
          description: Response message
          example: 'Roles retrieved successfully'
        data:
          type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    # Error Schema
    Error:
      type: object
      properties:
        statusCode:
          type: number
          description: HTTP status code
          example: 400
        message:
          type: string
          description: Error message
          example: 'totalAmount is required'
        error:
          type: string
          description: Detailed error description
          example: 'Missing required parameter'

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                example: 401
              message:
                type: string
                example: 'Unauthorized access'
              error:
                type: string
                example: 'Invalid or missing authentication token'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                example: 404
              message:
                type: string
                example: 'Resource not found'
              error:
                type: string
                example: 'The requested resource does not exist'

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                example: 403
              message:
                type: string
                example: 'Forbidden access'
              error:
                type: string
                example: 'Insufficient permissions to access this resource'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                example: 500
              message:
                type: string
                example: 'Internal server error'
              error:
                type: string
                example: 'An unexpected error occurred'
