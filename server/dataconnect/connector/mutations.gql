# Mutations for ADN Lab Firebase Data Connect - Complete DNA Testing Platform
# Chat functionality remains in Firestore
#
# SCHEMA UPDATES:
# - Removed separate Manager table mutations
# - Added Position table mutations
# - Staff mutations now use positionId instead of position string
# - TestResult managerId references Staff table (managers are staff with manager positions)

# ====== ROLE MUTATIONS ======

# Create a new role (admin only)
mutation CreateRole(
  $id: String!
  $name: String!
  $description: String
) @auth(level: USER) {
  role_insert(data: {
    id: $id
    name: $name
    description: $description
  })
}

# Update role (admin only)
mutation UpdateRole(
  $roleId: String!
  $name: String
  $description: String
) @auth(level: USER) {
  role_update(
    key: { id: $roleId }
    data: {
      name: $name
      description: $description
      updatedAt_expr: "request.time"
    }
  )
}

# Delete role (admin only)
mutation DeleteRole($roleId: String!) @auth(level: USER) {
  role_delete(key: { id: $roleId })
}

# ====== USER MUTATIONS ======

# Create or update user profile
mutation CreateOrUpdateUser(
  $id: String!
  $fullname: String!
  $gender: String
  $avatar: String
  $email: String!
  $phone: String
  $address: String
  $roleId: String
  $authProvider: String!
) @auth(level: USER) {
  user_upsert(
    data: {
      id: $id
      fullname: $fullname
      gender: $gender
      avatar: $avatar
      email: $email
      phone: $phone
      address: $address
      roleId: $roleId
      authProvider: $authProvider
      lastLogin_expr: "request.time"
    }
  )
}

# Update user profile
mutation UpdateUserProfile(
  $userId: String!
  $fullname: String
  $gender: String
  $avatar: String
  $phone: String
  $address: String
) @auth(level: USER) {
  user_update(
    key: { id: $userId }
    data: {
      fullname: $fullname
      gender: $gender
      avatar: $avatar
      phone: $phone
      address: $address
    }
  )
}

# Update user role (admin only)
mutation UpdateUserRole(
  $userId: String!
  $roleId: String!
) @auth(level: USER) {
  user_update(
    key: { id: $userId }
    data: {
      roleId: $roleId
    }
  )
}

# Update user account status (admin only)
mutation UpdateUserAccountStatus(
  $userId: String!
  $accountStatus: String!
) @auth(level: USER) {
  user_update(
    key: { id: $userId }
    data: {
      accountStatus: $accountStatus
    }
  )
}

# ====== STAFF MUTATIONS ======

# Create staff profile
mutation CreateStaff(
  $id: String!
  $hireDate: Date
  $slot: Int
  $specification: [String!]
  $certifications: [String!]
  $positionId: String!
) @auth(level: USER) {
  staff_insert(data: {
    id: $id
    hireDate: $hireDate
    slot: $slot
    specification: $specification
    certifications: $certifications
    positionId: $positionId
  })
}

# Update staff profile
mutation UpdateStaff(
  $staffId: String!
  $hireDate: Date
  $slot: Int
  $specification: [String!]
  $certifications: [String!]
  $positionId: String
) @auth(level: USER) {
  staff_update(
    key: { id: $staffId }
    data: {
      hireDate: $hireDate
      slot: $slot
      specification: $specification
      certifications: $certifications
      positionId: $positionId
      updatedAt_expr: "request.time"
    }
  )
}

# Assign staff to position
mutation AssignStaffToPosition(
  $staffId: String!
  $positionId: String!
) @auth(level: USER) {
  staff_update(
    key: { id: $staffId }
    data: {
      positionId: $positionId
      updatedAt_expr: "request.time"
    }
  )
}

# Create staff with position (comprehensive)
mutation CreateStaffWithPosition(
  $id: String!
  $hireDate: Date
  $slot: Int
  $specification: [String!]
  $certifications: [String!]
  $positionId: String!
) @auth(level: USER) {
  staff_insert(data: {
    id: $id
    hireDate: $hireDate
    slot: $slot
    specification: $specification
    certifications: $certifications
    positionId: $positionId
  })
}

# ====== POSITION MUTATIONS ======

# Create position
mutation CreatePosition(
  $id: String!
  $name: String!
  $description: String
) @auth(level: USER) {
  position_insert(data: {
    id: $id
    name: $name
    description: $description
  })
}

# Update position
mutation UpdatePosition(
  $positionId: String!
  $name: String
  $description: String
) @auth(level: USER) {
  position_update(
    key: { id: $positionId }
    data: {
      name: $name
      description: $description
      updatedAt_expr: "request.time"
    }
  )
}

# Delete position
mutation DeletePosition($positionId: String!) @auth(level: USER) {
  position_delete(key: { id: $positionId })
}

# ====== SERVICE MUTATIONS ======

# Create service category
mutation CreateServiceCategory(
  $id: String!
  $name: String!
  $description: String
  $hasLegalValue: Boolean!
) @auth(level: USER) {
  serviceCategory_insert(data: {
    id: $id
    name: $name
    description: $description
    hasLegalValue: $hasLegalValue
  })
}

# Update service category
mutation UpdateServiceCategory(
  $categoryId: String!
  $name: String
  $description: String
  $hasLegalValue: Boolean
) @auth(level: USER) {
  serviceCategory_update(
    key: { id: $categoryId }
    data: {
      name: $name
      description: $description
      hasLegalValue: $hasLegalValue
      updatedAt_expr: "request.time"
    }
  )
}

# Create method
mutation CreateMethod(
  $id: String!
  $name: String!
  $description: String
  $price: Float!
) @auth(level: USER) {
  method_insert(data: {
    id: $id
    name: $name
    description: $description
    price: $price
  })
}

# Update method
mutation UpdateMethod(
  $methodId: String!
  $name: String
  $description: String
  $price: Float
) @auth(level: USER) {
  method_update(
    key: { id: $methodId }
    data: {
      name: $name
      description: $description
      price: $price
      updatedAt_expr: "request.time"
    }
  )
}

# Create service
mutation CreateService(
  $id: String!
  $title: String!
  $description: String!
  $fullDescription: String
  $price: Float!
  $duration: String!
  $categoryId: String!
  $icon: String
  $featured: Boolean!
) @auth(level: USER) {
  service_insert(data: {
    id: $id
    title: $title
    description: $description
    fullDescription: $fullDescription
    price: $price
    duration: $duration
    categoryId: $categoryId
    icon: $icon
    featured: $featured
  })
}

# Update service
mutation UpdateService(
  $serviceId: String!
  $title: String
  $description: String
  $fullDescription: String
  $price: Float
  $duration: String
  $categoryId: String
  $icon: String
  $featured: Boolean
) @auth(level: USER) {
  service_update(
    key: { id: $serviceId }
    data: {
      title: $title
      description: $description
      fullDescription: $fullDescription
      price: $price
      duration: $duration
      categoryId: $categoryId
      icon: $icon
      featured: $featured
      updatedAt_expr: "request.time"
    }
  )
}

# Create service method association
mutation CreateServiceMethod(
  $serviceId: String!
  $methodId: String!
) @auth(level: USER) {
  serviceMethod_insert(data: {
    serviceId: $serviceId
    methodId: $methodId
  })
}

# Delete service method association
mutation DeleteServiceMethod(
  $serviceId: String!
  $methodId: String!
) @auth(level: USER) {
  serviceMethod_delete(key: { 
    serviceId: $serviceId,
    methodId: $methodId 
  })
}

# ====== TIME SLOT MUTATIONS ======

# Create time slot
mutation CreateTimeSlot(
  $id: String!
  $slotDate: Date!
  $startTime: String!
  $endTime: String!
  $notes: String
) @auth(level: USER) {
  timeSlot_insert(data: {
    id: $id
    slotDate: $slotDate
    startTime: $startTime
    endTime: $endTime
    notes: $notes
  })
}

# Update time slot
mutation UpdateTimeSlot(
  $timeSlotId: String!
  $slotDate: Date
  $startTime: String
  $endTime: String
  $notes: String
) @auth(level: USER) {
  timeSlot_update(
    key: { id: $timeSlotId }
    data: {
      slotDate: $slotDate
      startTime: $startTime
      endTime: $endTime
      notes: $notes
      updatedAt_expr: "request.time"
    }
  )
}

# Update time slot booking count
mutation UpdateTimeSlotBookings(
  $timeSlotId: String!
  $currentBookings: Int!
) @auth(level: USER) {
  timeSlot_update(
    key: { id: $timeSlotId }
    data: {
      currentBookings: $currentBookings
      updatedAt_expr: "request.time"
    }
  )
}

# ====== BOOKING MUTATIONS ======

# Create booking
mutation CreateBooking(
  $id: String!
  $userId: String!
  $staffId: String
  $timeSlotId: String
  $serviceId: String!
  $methodId: String!
  $totalAmount: Float!
) @auth(level: USER) {
  booking_insert(data: {
    id: $id
    userId: $userId
    staffId: $staffId
    timeSlotId: $timeSlotId
    serviceId: $serviceId
    methodId: $methodId
    totalAmount: $totalAmount
  })
}

# Update booking
mutation UpdateBooking(
  $bookingId: String!
  $staffId: String
  $timeSlotId: String
  $serviceId: String
  $methodId: String
  $totalAmount: Float
) @auth(level: USER) {
  booking_update(
    key: { id: $bookingId }
    data: {
      staffId: $staffId
      timeSlotId: $timeSlotId
      serviceId: $serviceId
      methodId: $methodId
      totalAmount: $totalAmount
      updatedAt_expr: "request.time"
    }
  )
}

# Assign staff to booking
mutation AssignBookingStaff(
  $bookingId: String!
  $staffId: String!
) @auth(level: USER) {
  booking_update(
    key: { id: $bookingId }
    data: {
      staffId: $staffId
      updatedAt_expr: "request.time"
    }
  )
}

# Create booking history entry
mutation CreateBookingHistory(
  $id: String!
  $bookingId: String!
  $description: String!
  $status: String!
) @auth(level: USER) {
  bookingHistory_insert(data: {
    id: $id
    bookingId: $bookingId
    description: $description
    status: $status
  })
}

# Update booking history status
mutation UpdateBookingHistory(
  $historyId: String!
  $description: String
  $status: String
) @auth(level: USER) {
  bookingHistory_update(
    key: { id: $historyId }
    data: {
      description: $description
      status: $status
      updatedAt_expr: "request.time"
    }
  )
}

# ====== PARTICIPANT MUTATIONS ======

# Create participant
mutation CreateParticipant(
  $id: String!
  $bookingId: String!
  $name: String!
  $age: Int!
  $identification: String
  $gender: String!
  $relationship: String
) @auth(level: USER) {
  participant_insert(data: {
    id: $id
    bookingId: $bookingId
    name: $name
    age: $age
    identification: $identification
    gender: $gender
    relationship: $relationship
  })
}

# Update participant
mutation UpdateParticipant(
  $participantId: String!
  $name: String
  $age: Int
  $identification: String
  $gender: String
  $relationship: String
) @auth(level: USER) {
  participant_update(
    key: { id: $participantId }
    data: {
      name: $name
      age: $age
      identification: $identification
      gender: $gender
      relationship: $relationship
      updatedAt_expr: "request.time"
    }
  )
}

# Delete participant
mutation DeleteParticipant($participantId: String!) @auth(level: USER) {
  participant_delete(key: { id: $participantId })
}

# ====== SAMPLE MUTATIONS ======

# Create sample
mutation CreateSample(
  $id: String!
  $bookingId: String!
  $staffId: String
  $participantId: String
  $collectionDate: Date
  $sampleQuality: String!
  $sampleConcentration: Float
  $notes: String
) @auth(level: USER) {
  sample_insert(data: {
    id: $id
    bookingId: $bookingId
    staffId: $staffId
    participantId: $participantId
    collectionDate: $collectionDate
    sampleQuality: $sampleQuality
    sampleConcentration: $sampleConcentration
    notes: $notes
  })
}

# Update sample
mutation UpdateSample(
  $sampleId: String!
  $staffId: String
  $participantId: String
  $collectionDate: Date
  $sampleQuality: String
  $sampleConcentration: Float
  $notes: String
) @auth(level: USER) {
  sample_update(
    key: { id: $sampleId }
    data: {
      staffId: $staffId
      participantId: $participantId
      collectionDate: $collectionDate
      sampleQuality: $sampleQuality
      sampleConcentration: $sampleConcentration
      notes: $notes
      updatedAt_expr: "request.time"
    }
  )
}

# Delete sample
mutation DeleteSample($sampleId: String!) @auth(level: USER) {
  sample_delete(key: { id: $sampleId })
}

# ====== TEST RESULT MUTATIONS ======

# Create test result
mutation CreateTestResult(
  $id: String!
  $bookingId: String!
  $sampleId: String!
  $staffId: String!
  $managerId: String!
  $testMethod: String!
  $positive: Boolean!
  $accuracy: Float!
  $testType: String!
  $testDate: Date
  $reportDate: Date
  $resultData: String
  $resultNotes: String
  $status: String
) @auth(level: USER) {
  testResult_insert(data: {
    id: $id
    bookingId: $bookingId
    sampleId: $sampleId
    staffId: $staffId
    managerId: $managerId
    testMethod: $testMethod
    positive: $positive
    accuracy: $accuracy
    testType: $testType
    testDate: $testDate
    reportDate: $reportDate
    resultData: $resultData
    resultNotes: $resultNotes
    status: $status
  })
}

# Update test result
mutation UpdateTestResult(
  $resultId: String!
  $testMethod: String
  $positive: Boolean
  $accuracy: Float
  $testType: String
  $testDate: Date
  $reportDate: Date
  $resultData: String
  $resultNotes: String
  $status: String
) @auth(level: USER) {
  testResult_update(
    key: { id: $resultId }
    data: {
      testMethod: $testMethod
      positive: $positive
      accuracy: $accuracy
      testType: $testType
      testDate: $testDate
      reportDate: $reportDate
      resultData: $resultData
      resultNotes: $resultNotes
      status: $status
      updatedAt_expr: "request.time"
    }
  )
}

# Assign staff to test result
mutation AssignTestResultStaff(
  $resultId: String!
  $staffId: String!
) @auth(level: USER) {
  testResult_update(
    key: { id: $resultId }
    data: {
      staffId: $staffId
      updatedAt_expr: "request.time"
    }
  )
}

# Assign manager (staff) to test result
mutation AssignTestResultManager(
  $resultId: String!
  $managerId: String!
) @auth(level: USER) {
  testResult_update(
    key: { id: $resultId }
    data: {
      managerId: $managerId
      updatedAt_expr: "request.time"
    }
  )
}

# Assign both staff and manager to test result
mutation AssignTestResultStaffAndManager(
  $resultId: String!
  $staffId: String!
  $managerId: String!
) @auth(level: USER) {
  testResult_update(
    key: { id: $resultId }
    data: {
      staffId: $staffId
      managerId: $managerId
      updatedAt_expr: "request.time"
    }
  )
}

# Delete test result
mutation DeleteTestResult($resultId: String!) @auth(level: USER) {
  testResult_delete(key: { id: $resultId })
}

# ====== PAYMENT MUTATIONS ======

# Create payment
mutation CreatePayment(
  $id: String!
  $bookingId: String!
  $amount: Float!
  $paymentMethod: String!
  $status: String
  $paymentDate: Date
  $refundDetail: String
  $otherDetails: [String!]
) @auth(level: USER) {
  payment_insert(data: {
    id: $id
    bookingId: $bookingId
    amount: $amount
    paymentMethod: $paymentMethod
    status: $status
    paymentDate: $paymentDate
    refundDetail: $refundDetail
    otherDetails: $otherDetails
  })
}

# Update payment status
mutation UpdatePaymentStatus(
  $paymentId: String!
  $status: String!
  $paymentDate: Date
) @auth(level: USER) {
  payment_update(
    key: { id: $paymentId }
    data: {
      status: $status
      paymentDate: $paymentDate
      updatedAt_expr: "request.time"
    }
  )
}

# Add other details to payment
mutation AddPaymentDetails(
  $paymentId: String!
  $otherDetails: [String!]
) @auth(level: USER) {
  payment_update(
    key: { id: $paymentId }
    data: {
      otherDetails: $otherDetails
      updatedAt_expr: "request.time"
    }
  )
}

# Update refund detail
mutation UpdateRefundDetail(
  $paymentId: String!
  $refundDetail: String!
) @auth(level: USER) {
  payment_update(
    key: { id: $paymentId }
    data: {
      refundDetail: $refundDetail
      updatedAt_expr: "request.time"
    }
  )
}

# ====== FEEDBACK MUTATIONS ======

# Create feedback
mutation CreateFeedback(
  $id: String!
  $bookingId: String!
  $rating: Int!
  $comment: String
) @auth(level: USER) {
  feedback_insert(data: {
    id: $id
    bookingId: $bookingId
    rating: $rating
    comment: $comment
  })
}

# Update feedback
mutation UpdateFeedback(
  $feedbackId: String!
  $rating: Int
  $comment: String
) @auth(level: USER) {
  feedback_update(
    key: { id: $feedbackId }
    data: {
      rating: $rating
      comment: $comment
    }
  )
}

# ====== BLOG MUTATIONS ======

# Create blog post
mutation CreateBlog(
  $id: String!
  $userId: String!
  $title: String!
  $content: String!
  $imageUrl: String
) @auth(level: USER) {
  blog_insert(data: {
    id: $id
    userId: $userId
    title: $title
    content: $content
    imageUrl: $imageUrl
  })
}

# Update blog post
mutation UpdateBlog(
  $blogId: String!
  $title: String
  $content: String
  $imageUrl: String
) @auth(level: USER) {
  blog_update(
    key: { id: $blogId }
    data: {
      title: $title
      content: $content
      imageUrl: $imageUrl
      updatedAt_expr: "request.time"
    }
  )
}

# Delete blog post
mutation DeleteBlog($blogId: String!) @auth(level: USER) {
  blog_delete(key: { id: $blogId })
}

# ====== NOTIFICATION MUTATIONS ======

# Create notification
mutation CreateNotification(
  $id: String!
  $userId: String
  $staffId: String
  $title: String!
  $message: String!
  $type: String!
) @auth(level: USER) {
  notification_insert(data: {
    id: $id
    userId: $userId
    staffId: $staffId
    title: $title
    message: $message
    type: $type
    isRead: false
  })
}

# Mark notification as read
mutation MarkNotificationRead($notificationId: String!) @auth(level: USER) {
  notification_update(
    key: { id: $notificationId }
    data: {
      isRead: true
    }
  )
}

# Mark all user notifications as read
mutation MarkAllNotificationsRead($userId: String!) @auth(level: USER) {
  notification_updateMany(
    where: { 
      userId: { eq: $userId }
      isRead: { eq: false }
    }
    data: {
      isRead: true
    }
  )
}

# Delete notification
mutation DeleteNotification($notificationId: String!) @auth(level: USER) {
  notification_delete(key: { id: $notificationId })
}

# ====== CLEANUP MUTATIONS ======

# Delete service category (admin only)
mutation DeleteServiceCategory($categoryId: String!) @auth(level: USER) {
  serviceCategory_delete(key: { id: $categoryId })
}

# Delete method (admin only)
mutation DeleteMethod($methodId: String!) @auth(level: USER) {
  method_delete(key: { id: $methodId })
}

# Delete service (admin only)
mutation DeleteService($serviceId: String!) @auth(level: USER) {
  service_delete(key: { id: $serviceId })
}

# Delete time slot (admin only)
mutation DeleteTimeSlot($timeSlotId: String!) @auth(level: USER) {
  timeSlot_delete(key: { id: $timeSlotId })
}

# Delete booking (admin only)
mutation DeleteBooking($bookingId: String!) @auth(level: USER) {
  booking_delete(key: { id: $bookingId })
}

# Delete staff profile (admin only)
mutation DeleteStaff($staffId: String!) @auth(level: USER) {
  staff_delete(key: { id: $staffId })
}
