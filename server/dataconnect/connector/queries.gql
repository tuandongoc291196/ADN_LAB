# Queries for ADN Lab Firebase Data Connect - Complete DNA Testing Platform
# Chat functionality remains in Firestore

# ====== ROLE QUERIES ======

# Get all roles
query GetRoles @auth(level: USER) {
  roles {
    id
    name
    description
    createdAt
    updatedAt
  }
}

# Get role by ID
query GetRoleById($roleId: String!) @auth(level: USER) {
  role(key: { id: $roleId }) {
    id
    name
    description
    createdAt
    updatedAt
  }
}

# Get role by name
query GetRoleByName($roleName: String!) @auth(level: USER) {
  roles(where: { name: { eq: $roleName } }) {
    id
    name
    description
  }
}

# ====== USER QUERIES ======

# Get user by Firebase Auth UID with role information
query GetUser @auth(level: USER) {
  user(key: { id_expr: "auth.uid" }) {
    id
    fullname
    gender
    avatar
    email
    accountStatus
    authProvider
    phone
    shippingAddress
    roleId
    role {
      id
      name
      description
    }
    dailySlotCount
    maxDailySlots
    createdAt
    lastLogin
  }
}

# Get user by ID (admin/staff use)
query GetUserById($userId: String!) @auth(level: USER) {
  user(key: { id: $userId }) {
    id
    fullname
    gender
    avatar
    email
    accountStatus
    authProvider
    phone
    shippingAddress
    roleId
    role {
      id
      name
      description
    }
    dailySlotCount
    maxDailySlots
    createdAt
    lastLogin
  }
}

# Get all users with pagination
query GetUsers($limit: Int, $offset: Int) @auth(level: USER) {
  users(limit: $limit, offset: $offset, orderBy: { createdAt: DESC }) {
    id
    fullname
    gender
    avatar
    email
    accountStatus
    role {
      id
      name
    }
    createdAt
    lastLogin
  }
}

# Get users by role
query GetUsersByRole($roleId: String!) @auth(level: USER) {
  users(where: { roleId: { eq: $roleId } }) {
    id
    fullname
    gender
    avatar
    email
    accountStatus
    role {
      name
    }
    createdAt
  }
}

# Get staff members
query GetStaffMembers @auth(level: USER) {
  users(where: { 
    role: { 
      name: { in: ["admin", "manager", "staff", "technician"] }
    }
  }) {
    id
    fullname
    gender
    avatar
    email
    role {
      name
    }
    accountStatus
  }
}

# ====== DNA SERVICE QUERIES ======

# Get all active DNA services
query GetDnaServices @auth(level: USER) {
  dnaServices(where: { active: { eq: true } }, orderBy: { name: ASC }) {
    id
    name
    description
    price
    durationDays
    sampleType
    atHomeAvailable
    kitCost
    createdAt
  }
}

# Get DNA service by ID
query GetDnaServiceById($serviceId: String!) @auth(level: USER) {
  dnaService(key: { id: $serviceId }) {
    id
    name
    description
    price
    durationDays
    sampleType
    atHomeAvailable
    active
    kitCost
    createdAt
  }
}

# Get DNA services by sample type
query GetDnaServicesBySampleType($sampleType: String!) @auth(level: USER) {
  dnaServices(where: { 
    sampleType: { eq: $sampleType }
    active: { eq: true }
  }) {
    id
    name
    description
    price
    durationDays
    atHomeAvailable
    kitCost
  }
}

# Get at-home available services
query GetAtHomeServices @auth(level: USER) {
  dnaServices(where: { 
    atHomeAvailable: { eq: true }
    active: { eq: true }
  }) {
    id
    name
    description
    price
    durationDays
    sampleType
    kitCost
  }
}

# ====== KIT QUERIES ======

# Get all kits
query GetKits @auth(level: USER) {
  kits(orderBy: { createdAt: DESC }) {
    id
    status
    amount
    createdAt
  }
}

# Get available kits
query GetAvailableKits @auth(level: USER) {
  kits(where: { status: { eq: "available" } }) {
    id
    amount
    createdAt
  }
}

# Get kit by ID
query GetKitById($kitId: String!) @auth(level: USER) {
  kit(key: { id: $kitId }) {
    id
    status
    amount
    createdAt
  }
}

# ====== TIME SLOT QUERIES ======

# Get available time slots for a specific date
query GetAvailableTimeSlots($slotDate: Date!) @auth(level: USER) {
  timeSlots(where: { 
    slotDate: { eq: $slotDate }
    available: { eq: true }
  }, orderBy: { startTime: ASC }) {
    id
    slotDate
    startTime
    endTime
    maxCapacity
    currentBookings
    staff {
      id
      fullname
    }
    notes
  }
}

# Get time slots by staff
query GetTimeSlotsByStaff($staffId: String!) @auth(level: USER) {
  timeSlots(where: { staffId: { eq: $staffId } }, orderBy: [{ slotDate: ASC }, { startTime: ASC }]) {
    id
    slotDate
    startTime
    endTime
    maxCapacity
    currentBookings
    available
    notes
  }
}

# Get time slot by ID
query GetTimeSlotById($timeSlotId: String!) @auth(level: USER) {
  timeSlot(key: { id: $timeSlotId }) {
    id
    slotDate
    startTime
    endTime
    maxCapacity
    currentBookings
    available
    staff {
      id
      fullname
    }
    notes
    createdAt
    updatedAt
  }
}

# Get time slots for date range
query GetTimeSlotsInRange($startDate: Date!, $endDate: Date!) @auth(level: USER) {
  timeSlots(where: { 
    slotDate: { ge: $startDate, le: $endDate }
  }, orderBy: [{ slotDate: ASC }, { startTime: ASC }]) {
    id
    slotDate
    startTime
    endTime
    maxCapacity
    currentBookings
    available
    staff {
      fullname
    }
  }
}

# ====== BOOKING QUERIES ======

# Get user's bookings
query GetUserBookings($userId: String!) @auth(level: USER) {
  bookings(where: { userId: { eq: $userId } }, orderBy: { createdAt: DESC }) {
    id
    status
    collectionMethod
    totalAmount
    timeSlot {
      slotDate
      startTime
      endTime
    }
    staff {
      fullname
    }
    kit {
      id
      status
    }
    createdAt
    updatedAt
  }
}

# Get current user's bookings
query GetMyBookings @auth(level: USER) {
  bookings(where: { userId: { eq_expr: "auth.uid" } }, orderBy: { createdAt: DESC }) {
    id
    status
    collectionMethod
    totalAmount
    notes
    timeSlot {
      slotDate
      startTime
      endTime
    }
    staff {
      fullname
    }
    kit {
      id
      status
    }
    createdAt
    updatedAt
  }
}

# Get booking by ID with full details
query GetBookingById($bookingId: String!) @auth(level: USER) {
  booking(key: { id: $bookingId }) {
    id
    user {
      id
      fullname
      email
      phone
      shippingAddress
    }
    staff {
      id
      fullname
    }
    kit {
      id
      status
      amount
    }
    timeSlot {
      slotDate
      startTime
      endTime
      staff {
        fullname
      }
    }
    status
    collectionMethod
    notes
    totalAmount
    createdAt
    updatedAt
  }
}

# Get bookings by status
query GetBookingsByStatus($status: String!) @auth(level: USER) {
  bookings(where: { status: { eq: $status } }, orderBy: { createdAt: DESC }) {
    id
    user {
      fullname
      email
    }
    status
    collectionMethod
    totalAmount
    timeSlot {
      slotDate
      startTime
    }
    staff {
      fullname
    }
    createdAt
  }
}

# Get staff's assigned bookings
query GetStaffBookings($staffId: String!) @auth(level: USER) {
  bookings(where: { staffId: { eq: $staffId } }, orderBy: { createdAt: DESC }) {
    id
    user {
      fullname
      email
      phone
    }
    status
    collectionMethod
    totalAmount
    timeSlot {
      slotDate
      startTime
      endTime
    }
    notes
    createdAt
  }
}

# ====== BOOKING ITEM QUERIES ======

# Get booking items for a booking
query GetBookingItems($bookingId: String!) @auth(level: USER) {
  bookingItems(where: { bookingId: { eq: $bookingId } }) {
    id
    service {
      id
      name
      description
      price
      durationDays
      sampleType
    }
    price
    quantity
    notes
  }
}

# Get booking item by ID
query GetBookingItemById($itemId: String!) @auth(level: USER) {
  bookingItem(key: { id: $itemId }) {
    id
    booking {
      id
      user {
        fullname
      }
    }
    service {
      id
      name
      price
    }
    price
    quantity
    notes
  }
}

# ====== SAMPLE QUERIES ======

# Get samples for a booking
query GetBookingSamples($bookingId: String!) @auth(level: USER) {
  samples(where: { bookingId: { eq: $bookingId } }) {
    id
    service {
      name
      sampleType
    }
    staff {
      fullname
    }
    collectionDate
    status
    notes
  }
}

# Get samples by status
query GetSamplesByStatus($status: String!) @auth(level: USER) {
  samples(where: { status: { eq: $status } }) {
    id
    booking {
      id
      user {
        fullname
      }
    }
    service {
      name
      sampleType
    }
    staff {
      fullname
    }
    collectionDate
    status
    notes
  }
}

# Get sample by ID
query GetSampleById($sampleId: String!) @auth(level: USER) {
  sample(key: { id: $sampleId }) {
    id
    booking {
      id
      user {
        fullname
        email
      }
    }
    service {
      name
      sampleType
      description
    }
    staff {
      fullname
    }
    collectionDate
    status
    notes
  }
}

# Get staff's samples
query GetStaffSamples($staffId: String!) @auth(level: USER) {
  samples(where: { staffId: { eq: $staffId } }) {
    id
    booking {
      user {
        fullname
      }
    }
    service {
      name
      sampleType
    }
    collectionDate
    status
    notes
  }
}

# ====== TEST RESULT QUERIES ======

# Get test results for a booking
query GetBookingTestResults($bookingId: String!) @auth(level: USER) {
  testResults(where: { bookingId: { eq: $bookingId } }) {
    id
    sample {
      id
    }
    service {
      name
    }
    staff {
      fullname
    }
    verifier {
      fullname
    }
    testDate
    reportDate
    status
    reportUrl
    notes
  }
}

# Get test result by ID
query GetTestResultById($resultId: String!) @auth(level: USER) {
  testResult(key: { id: $resultId }) {
    id
    booking {
      id
      user {
        fullname
        email
      }
    }
    sample {
      id
      collectionDate
    }
    service {
      name
      description
    }
    staff {
      fullname
    }
    verifier {
      fullname
    }
    testDate
    reportDate
    resultData
    status
    reportUrl
    notes
  }
}

# Get test results by status
query GetTestResultsByStatus($status: String!) @auth(level: USER) {
  testResults(where: { status: { eq: $status } }) {
    id
    booking {
      user {
        fullname
      }
    }
    service {
      name
    }
    staff {
      fullname
    }
    testDate
    status
  }
}

# Get user's test results
query GetUserTestResults($userId: String!) @auth(level: USER) {
  testResults(where: { 
    booking: { userId: { eq: $userId } }
  }, orderBy: { testDate: DESC }) {
    id
    service {
      name
    }
    testDate
    reportDate
    status
    reportUrl
  }
}

# ====== PAYMENT QUERIES ======

# Get payment for booking
query GetBookingPayment($bookingId: String!) @auth(level: USER) {
  payments(where: { bookingId: { eq: $bookingId } }) {
    id
    amount
    paymentMethod
    transactionId
    status
    paymentDate
    refundDetail
  }
}

# Get payment by ID
query GetPaymentById($paymentId: String!) @auth(level: USER) {
  payment(key: { id: $paymentId }) {
    id
    booking {
      id
      user {
        fullname
        email
      }
      totalAmount
    }
    amount
    paymentMethod
    transactionId
    status
    paymentDate
    refundDetail
  }
}

# Get payments by status
query GetPaymentsByStatus($status: String!) @auth(level: USER) {
  payments(where: { status: { eq: $status } }, orderBy: { paymentDate: DESC }) {
    id
    booking {
      user {
        fullname
      }
    }
    amount
    paymentMethod
    transactionId
    paymentDate
  }
}

# Get user's payments
query GetUserPayments($userId: String!) @auth(level: USER) {
  payments(where: { 
    booking: { userId: { eq: $userId } }
  }, orderBy: { paymentDate: DESC }) {
    id
    amount
    paymentMethod
    status
    paymentDate
  }
}

# ====== FEEDBACK QUERIES ======

# Get feedback for booking
query GetBookingFeedback($bookingId: String!) @auth(level: USER) {
  feedbacks(where: { bookingId: { eq: $bookingId } }) {
    id
    rating
    comment
    createdAt
  }
}

# Get all feedback with pagination
query GetAllFeedback($limit: Int, $offset: Int) @auth(level: USER) {
  feedbacks(limit: $limit, offset: $offset, orderBy: { createdAt: DESC }) {
    id
    booking {
      user {
        fullname
      }
    }
    rating
    comment
    createdAt
  }
}

# Get feedback by rating
query GetFeedbackByRating($rating: Int!) @auth(level: USER) {
  feedbacks(where: { rating: { eq: $rating } }, orderBy: { createdAt: DESC }) {
    id
    booking {
      user {
        fullname
      }
    }
    rating
    comment
    createdAt
  }
}

# ====== BLOG QUERIES ======

# Get all blog posts
query GetBlogs($limit: Int, $offset: Int) @auth(level: USER) {
  blogs(limit: $limit, offset: $offset, orderBy: { createdAt: DESC }) {
    id
    user {
      id
      fullname
      avatar
    }
    content
    imageUrl
    createdAt
  }
}

# Get blog post by ID
query GetBlogById($blogId: String!) @auth(level: USER) {
  blog(key: { id: $blogId }) {
    id
    user {
      id
      fullname
      avatar
      role {
        name
      }
    }
    content
    imageUrl
    createdAt
  }
}

# Get blog posts by user
query GetBlogsByUser($userId: String!) @auth(level: USER) {
  blogs(where: { userId: { eq: $userId } }, orderBy: { createdAt: DESC }) {
    id
    content
    imageUrl
    createdAt
  }
}

# Get current user's blog posts
query GetMyBlogs @auth(level: USER) {
  blogs(where: { userId: { eq_expr: "auth.uid" } }, orderBy: { createdAt: DESC }) {
    id
    content
    imageUrl
    createdAt
  }
}

# ====== NOTIFICATION QUERIES ======

# Get user's notifications
query GetUserNotifications($userId: String!) @auth(level: USER) {
  notifications(where: { userId: { eq: $userId } }, orderBy: { createdAt: DESC }) {
    id
    staff {
      fullname
    }
    title
    message
    isRead
    type
    createdAt
  }
}

# Get current user's notifications
query GetMyNotifications @auth(level: USER) {
  notifications(where: { userId: { eq_expr: "auth.uid" } }, orderBy: { createdAt: DESC }) {
    id
    staff {
      fullname
    }
    title
    message
    isRead
    type
    createdAt
  }
}

# Get unread notifications count
query GetUnreadNotificationsCount($userId: String!) @auth(level: USER) {
  notifications(where: { 
    userId: { eq: $userId }
    isRead: { eq: false }
  }) {
    id
  }
}

# Get notification by ID
query GetNotificationById($notificationId: String!) @auth(level: USER) {
  notification(key: { id: $notificationId }) {
    id
    user {
      fullname
    }
    staff {
      fullname
    }
    title
    message
    isRead
    type
    createdAt
  }
}

# ====== ANALYTICS & REPORTING QUERIES ======

# Get booking statistics
query GetBookingStats @auth(level: USER) {
  bookings {
    id
    status
    totalAmount
    createdAt
  }
}

# Get service popularity
query GetServicePopularity @auth(level: USER) {
  bookingItems {
    service {
      id
      name
    }
    quantity
  }
}

# Get monthly revenue
query GetMonthlyRevenue($year: Int!, $month: Int!, $startDate: Date!, $endDate: Date!) @auth(level: USER) {
  payments(where: { 
    status: { eq: "completed" }
    paymentDate: { 
      ge: $startDate
      lt: $endDate
    }
  }) {
    amount
    paymentDate
  }
}
