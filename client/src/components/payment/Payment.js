import React, { useState, useEffect, useMemo } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Form, Alert, Badge, Modal } from 'react-bootstrap';
import { getBookingById, createPayment, getServiceById } from '../../services/api';

const Payment = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [bookingData, setBookingData] = useState(null);
    const [bookingId, setBookingId] = useState('');
    const [paymentMethod, setPaymentMethod] = useState('');
    const [paymentData, setPaymentData] = useState({
        customerName: '',
        customerPhone: '',
        customerEmail: '',
        bankTransferNote: ''
    });
    const [loading, setLoading] = useState(false);
    const [showBankModal, setShowBankModal] = useState(false);
    const [agreedToTerms, setAgreedToTerms] = useState(false);

    // Payment methods configuration
    const paymentMethods = [
        {
            id: 'momo',
            name: 'V√≠ MoMo',
            description: 'Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ MoMo',
            icon: 'bi-phone',
            color: 'danger',
            type: 'online',
            fee: 0,
            note: 'Nhanh ch√≥ng v√† ti·ªán l·ª£i'
        },
        {
            id: 'zalopay',
            name: 'ZaloPay',
            description: 'Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ ZaloPay',
            icon: 'bi-wallet2',
            color: 'info',
            type: 'online',
            fee: 0,
            note: '∆Øu ƒë√£i v√† ho√†n ti·ªÅn h·∫•p d·∫´n'
        },
        {
            id: 'cash-on-service',
            name: 'Thanh to√°n khi s·ª≠ d·ª•ng d·ªãch v·ª•',
            description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi s·ª≠ d·ª•ng d·ªãch v·ª•',
            icon: 'bi-cash',
            color: 'warning',
            type: 'offline',
            fee: 0,
            note: 'Ph√π h·ª£p v·ªõi d·ªãch v·ª• l·∫•y m·∫´u tr·ª±c ti·∫øp t·∫°i c∆° s·ªü'
        }
    ];

    const getCollectionMethodName = (method) => {
        const methods = {
            'self-sample': 'T·ª± l·∫•y m·∫´u t·∫°i nh√†',
            'home-visit': 'Nh√¢n vi√™n t·ªõi nh√† l·∫•y m·∫´u',
            'at-facility': 'T·ªõi c∆° s·ªü l·∫•y m·∫´u',
            '0': 'T·ª± l·∫•y m·∫´u t·∫°i nh√†',
            '1': 'Nh√¢n vi√™n t·ªõi nh√† l·∫•y m·∫´u',
            '2': 'T·ªõi c∆° s·ªü l·∫•y m·∫´u'
        };
        return methods[method] || method;
    };

    useEffect(() => {
        let id = '';
        if (location.state && location.state.bookingData) {
            id = location.state.bookingData.id || location.state.bookingData.bookingId || '';
            setBookingId(id);
            // N·∫øu bookingData ƒë√£ c√≥ information th√¨ set lu√¥n, v√† l·∫•y info t·ª´ information[0]
            if (location.state.bookingData.information) {
                setBookingData(location.state.bookingData);
                const customerInfo = location.state.bookingData.information[0] || {};
                setPaymentData({
                    customerName: customerInfo.name || '',
                    customerPhone: customerInfo.phone || '',
                    customerEmail: customerInfo.email || '',
                    bankTransferNote: `Thanh toan xet nghiem ADN ${id}`
                });
            } else {
                setBookingData(location.state.bookingData);
                // N·∫øu kh√¥ng c√≥ information, ƒë·ªÉ paymentData r·ªóng, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi fetch API
            }
        } else if (location.state && location.state.bookingId) {
            id = location.state.bookingId;
            setBookingId(id);
            // Lu√¥n fetch l·∫°i th√¥ng tin booking khi ch·ªâ c√≥ bookingId
            getBookingById(id)
                .then((data) => {
                    setBookingData(data); // data l√† object booking chi ti·∫øt
                    const customerInfo = data.information?.[0] || {};
                    setPaymentData({
                        customerName: customerInfo.name || '',
                        customerPhone: customerInfo.phone || '',
                        customerEmail: customerInfo.email || '',
                        bankTransferNote: `Thanh toan xet nghiem ADN ${id}`
                    });
                })
                .catch(() => {
                    navigate('/appointment');
                });
        } else {
            navigate('/appointment');
        }

        if (id && !bookingData) {
            getBookingById(id)
                .then((data) => {
                    // ƒê·∫£m b·∫£o bookingData l√† object booking, kh√¥ng ph·∫£i wrapper
                    const booking = data.booking || data;
                    //setBookingData(booking);
                    // L·∫•y info t·ª´ information[0] (chu·∫©n backend)
                    const customerInfo = booking.information?.[0] || {};
                    setPaymentData({
                        customerName: customerInfo.name || '',
                        customerPhone: customerInfo.phone || '',
                        customerEmail: customerInfo.email || '',
                        bankTransferNote: `Thanh toan xet nghiem ADN ${id}`
                    });
                })
                .catch(() => {
                    navigate('/appointment');
                });
        }
    }, [location.state, navigate]);

    useEffect(() => {
        if (
            bookingData?.serviceId &&
            !bookingData?.service?.category?.name
        ) {
            getServiceById(bookingData.serviceId)
                .then((service) => {
                    setBookingData((prev) => ({
                        ...prev,
                        service: {
                            ...(prev.service || {}),
                            ...service
                        }
                    }));
                })
                .catch((error) => {
                    console.error('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c category t·ª´ serviceId:', error.message);
                });
        }
    }, [bookingData?.serviceId]);
    console.log('üì¶ Fetched bookingData:', bookingData);

    // Helper: Map bookingData to display info for order summary (API tr·∫£ v·ªÅ d·∫°ng m·ªõi ho·∫∑c t·ª´ form)
    const getOrderSummary = () => {
        if (!bookingData) return null;
        // D·∫°ng bookingData tr∆∞·ªõc khi l∆∞u (t·ª´ form, c√≥ selectedService, selectedMethod, ...)
        if (bookingData.selectedService && bookingData.selectedMethod) {
            const info = bookingData.customerInfo || {};
            // ∆Øu ti√™n l·∫•y category name t·ª´ selectedService.category
            let category = '';
            if (bookingData.selectedService.category) {
                category = bookingData.selectedService.category.name || bookingData.selectedService.category;
            } else if (bookingData.serviceType) {
                category = bookingData.serviceType;
            }
            return {
                serviceName: bookingData.selectedService.id || bookingData.selectedService.name || '',
                methodName: bookingData.selectedMethod.name || getCollectionMethodName(bookingData.selectedMethod.id || bookingData.collectionMethod),
                customerName: info.fullName || '',
                customerPhone: info.phone || '',
                customerEmail: info.email || '',
                customerAddress: info.address || '',
                appointmentDate: bookingData.appointmentDate || '',
                appointmentTime: bookingData.appointmentTime || '',
                price: bookingData.selectedMethod.price || bookingData.selectedService.price || 0,
                serviceFee: 0,
                total: (bookingData.selectedMethod.price + bookingData.selectedService.price || 0),
                category,
            };
        }
    };
    const orderSummary = useMemo(() => getOrderSummary(), [bookingData]);

    const totalAmount = orderSummary?.total || 0;

    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    };

    const handlePaymentMethodSelect = (methodId) => {
        setPaymentMethod(methodId);

        // Show bank modal if bank transfer is selected
        if (methodId === 'bank-transfer') {
            setShowBankModal(true);
        }
    };

    const handlePaymentSubmit = async () => {
        if (!paymentMethod) {
            alert('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n');
            return;
        }

        setLoading(true);

        try {
            // Map payment method ID to API format
            let method;
            switch (paymentMethod) {
                case 'momo':
                    method = 'MOMO';
                    break;
                case 'zalopay':
                    method = 'ZALOPAY';
                    break;
                case 'cash-on-service':
                    method = 'CASH';
                    break;
                default:
                    method = paymentMethod.toUpperCase();
            }
            
            const today = new Date().toISOString().split('T')[0];

            const payload = {
                bookingId,
                amount: totalAmount,
                paymentMethod: method,
                paymentDate: today
            };

            console.log('üì§ Payload g·ª≠i l√™n:', payload);

            const response = await fetch('https://app-bggwpxm32a-uc.a.run.app/payments/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            console.log('‚úÖ Payment result:', result);

            if (!response.ok) {
                throw new Error(result.message || 'Thanh to√°n th·∫•t b·∫°i');
            }

            // üîÅ Redirect n·∫øu c√≥ link thanh to√°n
            if (result.data && typeof result.data === 'string' && result.data.startsWith('http')) {
                window.location.href = result.data;
                return;
            }

            // ‚úÖ Tr∆∞·ªùng h·ª£p kh√¥ng c·∫ßn redirect
            if (paymentMethod === 'cash-on-service') {
                // Thanh to√°n ti·ªÅn m·∫∑t
                alert('ƒê·∫∑t l·ªãch th√†nh c√¥ng! Vui l√≤ng thanh to√°n khi s·ª≠ d·ª•ng d·ªãch v·ª•.');
                navigate('/user/appointments', { state: { bookingId } });
            } else {
                // Thanh to√°n online
            alert('Thanh to√°n th√†nh c√¥ng!');
            navigate('/payment-success', { state: { bookingId } });
            }

        } catch (error) {
            console.error('‚ùå Payment error:', error);
            alert(`Thanh to√°n th·∫•t b·∫°i: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };


    const selectedPaymentMethod = paymentMethods.find(m => m.id === paymentMethod);

    const getCategoryClass = (categoryName) => {
        switch (categoryName?.toLowerCase()) {
            case 'adn d√¢n s·ª±':
                return 'bg-success text-white px-2 py-1 rounded d-inline-block';
            case 'adn h√†nh ch√≠nh':
                return 'bg-warning text-black px-2 py-1 rounded d-inline-block';
            default:
                return 'bg-light text-dark px-2 py-1 rounded d-inline-block';
        }
    };

    return (
        <div>
            {/* Header */}
            <section className="bg-success text-white py-4">
                <Container>
                    <Row className="align-items-center">
                        <Col>
                            <h1 className="h3 mb-2">
                                <i className="bi bi-credit-card me-2"></i>
                                Thanh to√°n d·ªãch v·ª•
                            </h1>
                            <p className="mb-0">
                                Ho√†n t·∫•t thanh to√°n ƒë·ªÉ x√°c nh·∫≠n ƒë·∫∑t l·ªãch x√©t nghi·ªám ADN
                            </p>
                        </Col>
                        <Col xs="auto">
                            <div className="text-end">
                                <div className="small">M√£ ƒë·∫∑t l·ªãch</div>
                                <strong>{bookingId}</strong>
                            </div>
                        </Col>
                    </Row>
                </Container>
            </section>

            <Container className="py-5">
                <Row>
                    {/* Order Summary */}
                    <Col lg={4} className="mb-4">
                        <Card className="shadow-sm">
                            <Card.Header className="bg-primary text-white">
                                <h5 className="mb-0">
                                    <i className="bi bi-receipt me-2"></i>
                                    Chi ti·∫øt ƒë∆°n h√†ng
                                </h5>
                            </Card.Header>
                            <Card.Body>
                                <div className="mb-3">
                                    <h6 className="text-primary mb-2">D·ªãch v·ª•</h6>
                                    <div className="small">
                                        <div className={getCategoryClass(orderSummary?.category)}>
                                            {orderSummary?.category || ''}
                                        </div>
                                        <div className="fw-medium mt-1">{orderSummary?.serviceName}</div>
                                    </div>
                                </div>

                                <div className="mb-3">
                                    <h6 className="text-primary mb-2">Ph∆∞∆°ng th·ª©c l·∫•y m·∫´u</h6>
                                    <div className="small">{orderSummary?.methodName}</div>
                                </div>

                                {orderSummary?.appointmentDate && (
                                    <div className="mb-3">
                                        <h6 className="text-primary mb-2">L·ªãch h·∫πn</h6>
                                        <div className="small">
                                            <div><strong>Ng√†y:</strong> {orderSummary.appointmentDate}</div>
                                            <div><strong>Gi·ªù:</strong> {orderSummary.appointmentTime}</div>
                                        </div>
                                    </div>
                                )}

                                <div className="mb-3">
                                    <h6 className="text-primary mb-2">Kh√°ch h√†ng</h6>
                                    <div className="small">
                                        <div><strong>T√™n:</strong> {orderSummary?.customerName}</div>
                                        <div><strong>SƒêT:</strong> {orderSummary?.customerPhone}</div>
                                        <div><strong>Email:</strong> {orderSummary?.customerEmail}</div>
                                        <div><strong>ƒê·ªãa ch·ªâ:</strong> {orderSummary?.customerAddress}</div>
                                    </div>
                                </div>
                                <hr />
                                <div className="d-flex justify-content-between align-items-center mb-2">
                                    <span><strong>Gi√° d·ªãch v·ª•:</strong></span>
                                    <span className="text-primary mb-2">{bookingData?.selectedService?.price ? formatCurrency(bookingData.selectedService.price) : '‚Äî'}</span>
                                </div>

                                <div className="d-flex justify-content-between align-items-center mb-2">
                                    <span><strong>Ph√≠ d·ªãch v·ª•:</strong></span>
                                    <span className="text-primary mb-2">{bookingData?.selectedMethod?.price ? formatCurrency(bookingData.selectedMethod.price) : 'Mi·ªÖn ph√≠'}</span>
                                </div>
                                <hr />
                                <div className="d-flex justify-content-between align-items-center">
                                    <strong>T·ªïng thanh to√°n:</strong>
                                    <strong className="text-primary fs-5">{formatCurrency(orderSummary?.total || 0)}</strong>
                                </div>
                                <hr />
                            </Card.Body>
                        </Card>
                    </Col>
                    {/* Payment Methods */}
                    <Col lg={8}>
                        <Card className="shadow-sm">
                            <Card.Header className="bg-warning text-dark">
                                <h5 className="mb-0">
                                    <i className="bi bi-wallet me-2"></i>
                                    Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
                                </h5>
                            </Card.Header>
                            <Card.Body className="p-4">
                                <Row>
                                    {paymentMethods.map(method => {
                                        const isCashMethod = method.id === 'cash-on-service';
                                        const methodName = orderSummary?.methodName?.toLowerCase() || '';

                                        // C√°c ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c thanh to√°n ti·ªÅn m·∫∑t
                                        // Ch·ªâ cho ph√©p thanh to√°n ti·ªÅn m·∫∑t khi "t·ªõi c∆° s·ªü l·∫•y m·∫´u"
                                        // "Nh√¢n vi√™n t·ªõi nh√†" ph·∫£i thanh to√°n tr∆∞·ªõc ƒë·ªÉ tr√°nh spam
                                        // "T·ª± l·∫•y m·∫´u" kh√¥ng c√≥ nh√¢n vi√™n thu ti·ªÅn
                                        const disallowedCashMethods = ['t·ª± l·∫•y m·∫´u t·∫°i nh√†', 'nh√¢n vi√™n t·ªõi nh√† l·∫•y m·∫´u'];

                                        // Convert v·ªÅ lowercase ƒë·ªÉ so s√°nh ch√≠nh x√°c
                                        const normalizedMethod = methodName.toLowerCase().trim();
                                        const isDisabledCash = isCashMethod && disallowedCashMethods.includes(normalizedMethod);
                                        return (
                                            <Col key={method.id} md={6} className="mb-3">
                                                <Card
                                                    className={`h-100 border-2 ${isDisabledCash ? 'opacity-50' : 'cursor-pointer'} ${paymentMethod === method.id
                                                        ? `border-${method.color} shadow-sm`
                                                        : 'border-light'
                                                        }`}
                                                    style={{ transition: 'all 0.3s ease' }}
                                                    onClick={() => !isDisabledCash && handlePaymentMethodSelect(method.id)}
                                                >
                                                    <Card.Body className="text-center p-3">
                                                        <div className={`bg-${method.color} bg-opacity-10 rounded-circle mx-auto mb-3 d-flex align-items-center justify-content-center`}
                                                            style={{ width: '60px', height: '60px' }}>
                                                            <i className={`${method.icon} text-${method.color} fs-3`}></i>
                                                        </div>
                                                        <h6 className={`mb-2 ${paymentMethod === method.id ? `text-${method.color}` : ''}`}>
                                                            {method.name}
                                                        </h6>
                                                        <p className="small text-muted mb-2">{method.description}</p>
                                                        <div className="small text-muted">{method.note}</div>
                                                        {isDisabledCash && (
                                                            <div className="mt-2 text-danger small">
                                                                {methodName.includes('nh√¢n vi√™n t·ªõi nh√†') 
                                                                    ? 'Kh√¥ng √°p d·ª•ng cho ph∆∞∆°ng th·ª©c thu m·∫´u hi·ªán t·∫°i'
                                                                    : 'Kh√¥ng √°p d·ª•ng cho ph∆∞∆°ng th·ª©c thu m·∫´u hi·ªán t·∫°i'
                                                                }
                                                            </div>
                                                        )}
                                                        {paymentMethod === method.id && !isDisabledCash && (
                                                            <div className="mt-3">
                                                                <Badge bg={method.color} className="px-3 py-2">
                                                                    <i className="bi bi-check-circle me-2"></i>
                                                                    ƒê√£ ch·ªçn
                                                                </Badge>
                                                            </div>
                                                        )}
                                                    </Card.Body>
                                                </Card>
                                            </Col>
                                        );
                                    })}
                                </Row>

                                {/* Payment Details Form */}
                                {paymentMethod && (
                                    <Card className="mt-4 border-primary">
                                        <Card.Header className="bg-primary text-white">
                                            <h6 className="mb-0">
                                                <i className="bi bi-info-circle me-2"></i>
                                                Th√¥ng tin thanh to√°n - {selectedPaymentMethod?.name}
                                            </h6>
                                        </Card.Header>
                                        <Card.Body>
                                            {/* Online Payment Methods */}
                                            {selectedPaymentMethod?.type === 'online' && (
                                                <Alert variant="info">
                                                    <i className="bi bi-shield-check me-2"></i>
                                                    <strong>Thanh to√°n tr·ª±c tuy·∫øn an to√†n</strong>
                                                    <p className="mb-0 mt-2">
                                                        B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn c·ªïng thanh to√°n {selectedPaymentMethod?.name} ƒë·ªÉ ho√†n t·∫•t giao d·ªãch.
                                                        Th√¥ng tin thanh to√°n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t tuy·ªát ƒë·ªëi.
                                                    </p>
                                                </Alert>
                                            )}

                                            {/* Bank Transfer */}
                                            {paymentMethod === 'bank-transfer' && (
                                                <div>
                                                    <Alert variant="warning">
                                                        <i className="bi bi-info-circle me-2"></i>
                                                        <strong>H∆∞·ªõng d·∫´n chuy·ªÉn kho·∫£n</strong>
                                                        <p className="mb-0 mt-2">
                                                            Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin b√™n d∆∞·ªõi v√† gi·ªØ l·∫°i bi√™n lai ƒë·ªÉ x√°c nh·∫≠n.
                                                            ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω sau khi ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c thanh to√°n (1-2 gi·ªù).
                                                        </p>
                                                    </Alert>
                                                </div>
                                            )}

                                            {/* Cash on Service */}
                                            {paymentMethod === 'cash-on-service' && (
                                                <Alert variant="warning">
                                                    <i className="bi bi-cash me-2"></i>
                                                    <strong>Thanh to√°n khi nh·∫≠n d·ªãch v·ª•</strong>
                                                    <p className="mb-0 mt-2">
                                                        B·∫°n s·∫Ω thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi s·ª≠ d·ª•ng d·ªãch v·ª•.
                                                        {(bookingData.collectionMethod === 'at-facility' || bookingData.collectionMethod === '2') && ' Thanh to√°n t·∫°i qu·∫ßy l·ªÖ t√¢n tr∆∞·ªõc khi x√©t nghi·ªám.'}
                                                        {(bookingData.collectionMethod === 'home-visit' || bookingData.collectionMethod === '1') && ' Kh√¥ng √°p d·ª•ng v·ªõi ph∆∞∆°ng th·ª©c nh√¢n vi√™n t·ªõi nh√† l·∫•y m·∫´u.'}
                                                        {(bookingData.collectionMethod === 'self-sample' || bookingData.collectionMethod === '0') && ' Kh√¥ng √°p d·ª•ng v·ªõi ph∆∞∆°ng th·ª©c t·ª± l·∫•y m·∫´u t·∫°i nh√†.'}
                                                    </p>
                                                </Alert>
                                            )}

                                            {/* Customer Information Confirmation */}

                                        </Card.Body>
                                    </Card>
                                )}

                                {/* Terms and Conditions */}
                                <div className="mt-4">
                                    <Card className="border-info">
                                        <Card.Body>
                                            <Form.Check
                                                type="checkbox"
                                                id="terms-agreement"
                                                checked={agreedToTerms}
                                                onChange={(e) => setAgreedToTerms(e.target.checked)}
                                                label={
                                                    <span>
                                                        T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                                                        <a href="/terms" target="_blank" className="text-primary">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>{' '}
                                                        v√†{' '}
                                                        <a href="/privacy" target="_blank" className="text-primary">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>{' '}
                                                        c·ªßa ADN LAB
                                                    </span>
                                                }
                                                className="mb-3"
                                            />
                                            <div className="small text-muted">
                                                <i className="bi bi-shield-check me-2 text-success"></i>
                                                Th√¥ng tin c√° nh√¢n v√† k·∫øt qu·∫£ x√©t nghi·ªám ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi theo quy ƒë·ªãnh ph√°p lu·∫≠t.
                                            </div>
                                        </Card.Body>
                                    </Card>
                                </div>

                                {/* Submit Button */}
                                <div className="text-center mt-4">
                                    <Button
                                        variant="success"
                                        size="lg"
                                        onClick={handlePaymentSubmit}
                                        disabled={!paymentMethod || loading || !agreedToTerms}
                                        className="px-5"
                                    >
                                        {loading ? (
                                            <>
                                                <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                                                ƒêang x·ª≠ l√Ω...
                                            </>
                                        ) : (
                                            <>
                                                <i className="bi bi-check-circle me-2"></i>
                                                {selectedPaymentMethod?.type === 'online' ? 'Thanh to√°n ngay' : 'X√°c nh·∫≠n ƒë·∫∑t l·ªãch'}
                                                <span className="ms-2">({formatCurrency(totalAmount)})</span>
                                            </>
                                        )}
                                    </Button>
                                </div>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                {/* Support Section */}
                <Row className="mt-5">
                    <Col>
                        <Card className="border-warning">
                            <Card.Body className="text-center py-4">
                                <h5 className="mb-3">
                                    <i className="bi bi-headset me-2"></i>
                                    C·∫ßn h·ªó tr·ª£ thanh to√°n?
                                </h5>
                                <p className="text-muted mb-3">
                                    ƒê·ªôi ng≈© chƒÉm s√≥c kh√°ch h√†ng s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7
                                </p>
                                <div className="d-flex justify-content-center gap-3 flex-wrap">
                                    <Button variant="warning">
                                        <i className="bi bi-telephone me-2"></i>
                                        Hotline: 1900 1234
                                    </Button>
                                    <Button variant="outline-warning">
                                        <i className="bi bi-chat-dots me-2"></i>
                                        Chat tr·ª±c tuy·∫øn
                                    </Button>
                                    <Button variant="outline-secondary">
                                        <i className="bi bi-envelope me-2"></i>
                                        Email: support@adnlab.vn
                                    </Button>
                                </div>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>
            </Container>

            {/* Bank Transfer Modal */}
            <Modal show={showBankModal} onHide={() => setShowBankModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>
                        <i className="bi bi-info-circle me-2"></i>
                        H∆∞·ªõng d·∫´n chuy·ªÉn kho·∫£n
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Alert variant="info">
                        <strong>L∆∞u √Ω quan tr·ªçng:</strong>
                        <ul className="mb-0 mt-2">
                            <li>Chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë ti·ªÅn: <strong>{formatCurrency(totalAmount)}</strong></li>
                            <li>Ghi ch√≠nh x√°c n·ªôi dung: <strong>{paymentData.bankTransferNote}</strong></li>
                            <li>Gi·ªØ l·∫°i bi√™n lai ƒë·ªÉ x√°c nh·∫≠n khi c·∫ßn thi·∫øt</li>
                            <li>Li√™n h·ªá hotline n·∫øu sau 2 gi·ªù ch∆∞a nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n</li>
                        </ul>
                    </Alert>
                    <p>Ch·ªçn m·ªôt trong c√°c t√†i kho·∫£n b√™n d∆∞·ªõi ƒë·ªÉ chuy·ªÉn kho·∫£n:</p>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowBankModal(false)}>
                        ƒê√£ hi·ªÉu
                    </Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
};

export default Payment;