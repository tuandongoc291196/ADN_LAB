/**
 * COMPONENT: Login
 * M·ª§C ƒê√çCH: Form ƒëƒÉng nh·∫≠p v·ªõi t√≠ch h·ª£p Firebase Authentication
 * CH·ª®C NƒÇNG:
 * - ƒêƒÉng nh·∫≠p b·∫±ng email/password ho·∫∑c Google
 * - Validation form v·ªõi Formik v√† Yup
 * - T·ª± ƒë·ªông ƒëi·ªÅu h∆∞·ªõng theo role c·ªßa user
 * - X·ª≠ l√Ω tr·∫°ng th√°i loading v√† error
 * - L∆∞u th√¥ng tin user v√†o localStorage
 */

import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Form, Alert, InputGroup, Badge } from 'react-bootstrap';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { 
  auth, 
  logInWithEmailAndPassword, 
  signInWithGoogle,
  dataConnect
} from '../config/firebase';
import { signOut } from 'firebase/auth';
import {
  getUser
} from '../../lib/dataconnect';
import { useAuthState } from 'react-firebase-hooks/auth';

const Login = ({ setUser }) => {
  // Hooks v√† state qu·∫£n l√Ω ƒëƒÉng nh·∫≠p
  const [user, loading] = useAuthState(auth);          // Tr·∫°ng th√°i auth t·ª´ Firebase
  const navigate = useNavigate();                      // Hook ƒëi·ªÅu h∆∞·ªõng
  const [showPassword, setShowPassword] = useState(false); // ·∫®n/hi·ªán m·∫≠t kh·∫©u
  const [loginError, setLoginError] = useState('');    // Th√¥ng b√°o l·ªói
  const [isLoading, setIsLoading] = useState(false);   // Tr·∫°ng th√°i loading

  // H√†m x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒëi·ªÅu h∆∞·ªõng theo role
  const getRedirectPath = (role) => {
    switch (role) {
      case 'admin': return '/admin';
      case 'staff': return '/staff';
      case 'manager': return '/manager';
      case 'customer': return '/user';
      default: return '/user';
    }
  };

  // Effect x·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  useEffect(() => {
    const handleUserLogin = async () => {
      if (loading) return;
      
      if (user) {
        try {
          // Th·ª≠ l·∫•y th√¥ng tin user t·ª´ database v·ªõi retry logic cho tr∆∞·ªùng h·ª£p Google Sign-In
          let userData = null;
          let retries = 3;
          
          while (retries > 0 && !userData?.user) {
            try {
              const { data } = await getUser(dataConnect, { userId: user.uid });
              userData = data;
              
              if (userData?.user) {
                break; // T√¨m th·∫•y user, tho√°t kh·ªèi loop
              }
            } catch (error) {
              console.log(`Retry ${4 - retries}: User not found yet, retrying...`);
            }
            
            retries--;
            if (retries > 0) {
              // ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i (cho ph√©p Firebase ho√†n th√†nh t·∫°o user)
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          }
          
          if (userData && userData.user) {
            const userInfo = userData.user;
            
            // ‚ö†Ô∏è KI·ªÇM TRA TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N
            if (userInfo.accountStatus === 'inactive') {
              console.log('üö´ Account is inactive:', userInfo.email);
              setLoginError('T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
              
              // ƒêƒÉng xu·∫•t kh·ªèi Firebase Auth
              await signOut(auth);
              return;
            }
            
            console.log('‚úÖ Account status check passed:', userInfo.accountStatus);
            
            // T·∫°o object ch·ª©a th√¥ng tin user cho app
            const appUser = {
              ...userInfo,
              id: userInfo.id,
              name: userInfo.fullname,
              email: userInfo.email,
              role: userInfo.role?.name || 'customer',
              avatar: userInfo.avatar,
              verified: user.emailVerified,
              phone: userInfo.phone,
              accountStatus: userInfo.accountStatus, // Th√™m accountStatus v√†o appUser
              // X√°c ƒë·ªãnh department d·ª±a tr√™n role
              department: userInfo.role?.name === 'admin' ? 'Administration' : 
                         userInfo.role?.name === 'staff' ? 'Laboratory' :
                         userInfo.role?.name === 'manager' ? 'Management' : null,
              // Ph√¢n quy·ªÅn d·ª±a tr√™n role
              permissions: userInfo.role?.name === 'admin' ? ['all'] : 
                          userInfo.role?.name === 'staff' ? ['tests', 'reports'] :
                          userInfo.role?.name === 'manager' ? ['users', 'reports', 'guides'] :
                          ['profile', 'tests']
            };

            // L∆∞u th√¥ng tin user v√† tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
            setUser(appUser);
            localStorage.setItem('isAuthenticated', 'true');
            
            // ƒêi·ªÅu h∆∞·ªõng theo role
            navigate(getRedirectPath(appUser.role));
          } else {
            // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y sau khi retry, hi·ªÉn th·ªã l·ªói chi ti·∫øt h∆°n
            console.error('User not found after retries. User UID:', user.uid);
            setLoginError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√†i kho·∫£n. Vui l√≤ng th·ª≠ ƒëƒÉng xu·∫•t v√† ƒëƒÉng nh·∫≠p l·∫°i.');
          }
        } catch (error) {
          console.error('Error processing user login:', error);
          setLoginError('ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.');
        }
      }
    };

    handleUserLogin();
  }, [user, loading, navigate, setUser]);

  // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng Google
  const handleGoogleSignIn = async () => {
    try {
      setIsLoading(true);
      setLoginError('');
      
      // G·ªçi h√†m signInWithGoogle v√† ƒë·ª£i ho√†n th√†nh
      await signInWithGoogle();
      
      // Kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m ·ªü ƒë√¢y v√¨ useEffect s·∫Ω x·ª≠ l√Ω khi user state thay ƒë·ªïi
    } catch (error) {
      console.error('Google sign in error:', error);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      if (error.code === 'auth/popup-closed-by-user') {
        setLoginError('ƒêƒÉng nh·∫≠p ƒë√£ b·ªã h·ªßy. Vui l√≤ng th·ª≠ l·∫°i.');
      } else if (error.code === 'auth/popup-blocked') {
        setLoginError('Popup ƒëƒÉng nh·∫≠p b·ªã ch·∫∑n. Vui l√≤ng cho ph√©p popup v√† th·ª≠ l·∫°i.');
      } else if (error.code === 'auth/network-request-failed') {
        setLoginError('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
      } else {
        setLoginError('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // C·∫•u h√¨nh form v·ªõi Formik v√† Yup
  const formik = useFormik({
    // Gi√° tr·ªã kh·ªüi t·∫°o
    initialValues: {
      email: '',
      password: '',
    },
    // X·ª≠ l√Ω submit form
    onSubmit: async (values) => {
      try {
        setIsLoading(true);
        setLoginError('');
        const { email, password } = values;
        await logInWithEmailAndPassword(email, password);
      } catch (error) {
        setLoginError('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.');
        console.error('Login error:', error);
      } finally {
        setIsLoading(false);
      }
    },
    // Validation schema v·ªõi Yup
    validationSchema: Yup.object().shape({
      email: Yup.string()
        .required('Email l√† b·∫Øt bu·ªôc')
        .email('Email kh√¥ng h·ª£p l·ªá'),
      password: Yup.string()
        .required('M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc')
        .min(6, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
    }),
  });

  return (
    <div style={{ backgroundColor: '#f8f9fa', minHeight: '100vh', paddingTop: '2rem', paddingBottom: '2rem' }}>
      <Container>
        <Row className="justify-content-center">
          <Col lg={5} md={7} sm={9}>
            {/* HEADER - Logo v√† ti√™u ƒë·ªÅ */}
            <div className="text-center mb-4">
              <div 
                className="rounded-circle mx-auto mb-3 d-flex align-items-center justify-content-center logo-circle" 
                style={{
                  width: '80px', 
                  height: '80px', 
                  backgroundColor: '#f8f9fa', 
                  border: '3px solid #007bff'
                }}
              >
                <img 
                  src="https://firebasestorage.googleapis.com/v0/b/su25-swp391-g8.firebasestorage.app/o/assets%2Flogo.png?alt=media&token=1c903ba1-852a-4f5b-b498-97c31ffbb742" 
                  alt="ADN Lab Logo"
                  style={{ 
                    width: '50px', 
                    height: '50px', 
                    objectFit: 'contain'
                  }}
                />
              </div>
              <h2 className="text-primary fw-bold">ADN LAB</h2>
              <p className="text-muted">Trung t√¢m x√©t nghi·ªám ADN h√†ng ƒë·∫ßu</p>
            </div>

            {/* CARD - Form ƒëƒÉng nh·∫≠p */}
            <Card className="shadow-lg border-0">
              <Card.Header className="bg-primary text-white text-center py-4">
                <h4 className="mb-0 fw-bold">
                  <i className="bi bi-box-arrow-in-right me-2"></i>
                  ƒêƒÉng nh·∫≠p
                </h4>
                <p className="mb-0 mt-2 opacity-75">
                  Truy c·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n
                </p>
              </Card.Header>

              <Card.Body className="p-4">
                {/* Th√¥ng b√°o l·ªói */}
                {loginError && (
                  <Alert variant="danger" className="mb-4">
                    <i className="bi bi-exclamation-circle me-2"></i>
                    {loginError}
                  </Alert>
                )}

                {/* Form ƒëƒÉng nh·∫≠p */}
                <Form onSubmit={formik.handleSubmit}>
                  {/* Input email */}
                  <Form.Group className="mb-3">
                    <Form.Label className="fw-medium">
                      <i className="bi bi-envelope me-2"></i>
                      Email <span className="text-danger">*</span>
                    </Form.Label>
                    <Form.Control
                      type="email"
                      name="email"
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                      value={formik.values.email}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      isInvalid={formik.touched.email && formik.errors.email}
                      size="lg"
                    />
                    <Form.Control.Feedback type="invalid">
                      {formik.errors.email}
                    </Form.Control.Feedback>
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label className="fw-medium">
                      <i className="bi bi-lock me-2"></i>
                      M·∫≠t kh·∫©u <span className="text-danger">*</span>
                    </Form.Label>
                    <InputGroup size="lg">
                      <Form.Control
                        type={showPassword ? 'text' : 'password'}
                        name="password"
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                        value={formik.values.password}
                        onChange={formik.handleChange}
                        onBlur={formik.handleBlur}
                        isInvalid={formik.touched.password && formik.errors.password}
                      />
                      <Button 
                        variant="outline-secondary"
                        onClick={() => setShowPassword(!showPassword)}
                        style={{ borderLeft: 'none' }}
                      >
                        <i className={`bi bi-eye${showPassword ? '-slash' : ''}`}></i>
                      </Button>
                      <Form.Control.Feedback type="invalid">
                        {formik.errors.password}
                      </Form.Control.Feedback>
                    </InputGroup>
                  </Form.Group>

                  <div className="text-end mb-4">
                    <Link to="/reset" className="text-decoration-none small">
                      <i className="bi bi-arrow-clockwise me-1"></i>
                      Qu√™n m·∫≠t kh·∫©u?
                    </Link>
                  </div>

                  <div className="d-grid gap-2 mb-4">
                    <Button
                      type="submit"
                      variant="primary" 
                      size="lg"
                      disabled={isLoading || loading}
                      className="fw-medium"
                    >
                      {isLoading || loading ? (
                        <>
                          <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                          ƒêang x·ª≠ l√Ω...
                        </>
                      ) : (
                        <>
                          <i className="bi bi-box-arrow-in-right me-2"></i>
                          ƒêƒÉng nh·∫≠p
                        </>
                      )}
                    </Button>
                  </div>
                </Form>

                {/* DIVIDER - Ph√¢n c√°ch gi·ªØa form ƒëƒÉng nh·∫≠p v√† Google Sign In */}
                <div className="text-center mb-4">
                  <div className="position-relative">
                    <hr />
                    <span className="position-absolute top-50 start-50 translate-middle bg-white px-3 text-muted small">
                      Ho·∫∑c ƒëƒÉng nh·∫≠p v·ªõi
                    </span>
                  </div>
                </div>

                {/* GOOGLE SIGN IN - ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google */}
                <div className="d-grid gap-2 mb-4">
                  <Button
                    variant="outline-danger"
                    size="lg"
                    onClick={handleGoogleSignIn}
                    disabled={isLoading || loading}
                    className="fw-medium"
                  >
                    {isLoading || loading ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                        ƒêang x·ª≠ l√Ω...
                      </>
                    ) : (
                      <>
                        <i className="bi bi-google me-2"></i>
                        ƒêƒÉng nh·∫≠p v·ªõi Google
                      </>
                    )}
                  </Button>
                </div>

                {/* LINK ƒêƒÇNG K√ù - Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng k√Ω */}
                <div className="text-center">
                  <p className="text-muted mb-0">
                    Ch∆∞a c√≥ t√†i kho·∫£n?{' '}
                    <Link to="/register" className="text-decoration-none fw-medium">
                      ƒêƒÉng k√Ω ngay
                    </Link>
                  </p>
                </div>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>
    </div>
  );
};

export default Login;
